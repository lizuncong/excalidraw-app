{"version":3,"file":"static/js/FreeDraw.b0e20617.chunk.js","mappings":"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","sources":["components/markdown/index.jsx","pages/free-draw/base/renderScene.js","pages/free-draw/base/index.jsx","util/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport rehypeRaw from \"rehype-raw\";\n// import { tomorrow } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport \"github-markdown-css\";\n\nimport './index.less'\n\n\nfunction Shapes({ src }) {\n  const [mdText, setMdText] = useState(\"\");\n  useEffect(() => {\n    fetch(src)\n      .then((response) => response.text())\n      .then((text) => {\n        setMdText(text);\n      });\n  }, [src]);\n  return (\n    <div className=\"markdown-body\">\n      <ReactMarkdown\n        children={mdText}\n        rehypePlugins={[rehypeRaw]}\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ node, inline, className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || \"\");\n            return !inline && match ? (\n              <SyntaxHighlighter\n                children={String(children).replace(/\\n$/, \"\")}\n                // style={{ background: 'red'}}\n                language={match[1]}\n                className=\"my-code\"\n                PreTag=\"div\"\n                {...props}\n              />\n            ) : (\n              <code className={className} {...props}>\n                {children}\n              </code>\n            );\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Shapes;\n","import { elements } from \"./index\";\n\nconst renderElements = (ctx, appState) => {\n  elements.forEach((ele) => {\n    ctx.save();\n    ctx.beginPath();\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = ele.strokeStyle;\n\n    ele.points.forEach((point, index) => {\n      if (!index) {\n        ctx.moveTo(...ele.points[0]);\n      } else {\n        ctx.lineTo(...point);\n      }\n    });\n\n    ctx.stroke();\n\n    ctx.restore();\n  });\n};\nconst renderScene = (canvas, appState) => {\n  const context = canvas.getContext(\"2d\");\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  renderElements(context, appState);\n  localStorage.setItem(\"free-draw-elements\", JSON.stringify(elements));\n};\n\nexport default renderScene;\n","import React, { memo, useRef, useEffect } from \"react\";\nimport { viewportCoordsToSceneCoords, rgb } from \"@/util\";\nimport MarkDown from \"@/components/markdown\";\nimport doc from \"@doc/canvas进阶/自由绘制.md\";\nimport \"./index.less\";\nimport renderScene from \"./renderScene\";\n\nexport const elements = JSON.parse(localStorage.getItem(\"free-draw-elements\")) || [];\nconst appState = {\n  offsetLeft: 0,\n  offsetTop: 0,\n  scrollX: 0,\n  scrollY: 0,\n  draggingElement: null,\n};\nconst Canvas = memo(() => {\n  const canvasRef = useRef(null);\n  const canvasContainer = useRef(null);\n  useEffect(() => {\n    // canvas分辨率矫正\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    const { offsetWidth, offsetHeight, offsetLeft, offsetTop } = canvas;\n    canvas.width = offsetWidth * window.devicePixelRatio;\n    canvas.height = offsetHeight * window.devicePixelRatio;\n    context.scale(window.devicePixelRatio, window.devicePixelRatio);\n    appState.offsetLeft = offsetLeft;\n    appState.offsetTop = offsetTop;\n    renderScene(canvas, appState);\n\n    // 防止双指滑动时切换页面\n    const wrap = canvasContainer.current;\n    const handleWheel = (e) => {\n      e.preventDefault();\n    };\n    // 防止双指滑动时切换页面\n    wrap.addEventListener(\"wheel\", handleWheel, {\n      passive: false,\n    });\n    return () => {\n      wrap.removeEventListener(\"wheel\", handleWheel);\n    };\n  }, []);\n  const handleCanvasPointerDown = (event) => {\n    const origin = viewportCoordsToSceneCoords(event, appState);\n\n    const pointerDownState = {\n      origin,\n      lastCoords: { ...origin },\n      eventListeners: {\n        onMove: null,\n        onUp: null,\n      },\n    };\n    const element = {\n      x: pointerDownState.origin.x,\n      y: pointerDownState.origin.y,\n      points: [[pointerDownState.origin.x, pointerDownState.origin.y]],\n      strokeColor: \"#000000\",\n      backgroundColor: \"transparent\",\n      fillStyle: \"hachure\",\n      strokeWidth: 1,\n      strokeStyle: rgb(),\n    };\n    appState.draggingElement = element;\n    elements.push(element);\n\n    const onPointerMove =\n      onPointerMoveFromCanvasPointerDownHandler(pointerDownState);\n    const onPointerUp =\n      onPointerUpFromCanvasPointerDownHandler(pointerDownState);\n    window.addEventListener(\"pointermove\", onPointerMove);\n    window.addEventListener(\"pointerup\", onPointerUp);\n    pointerDownState.eventListeners.onMove = onPointerMove;\n    pointerDownState.eventListeners.onUp = onPointerUp;\n  };\n  const onPointerMoveFromCanvasPointerDownHandler =\n    (pointerDownState) => (event) => {\n      const pointerCoords = viewportCoordsToSceneCoords(event, appState);\n\n      appState.draggingElement.points.push([pointerCoords.x, pointerCoords.y]);\n      renderScene(canvasRef.current, appState);\n    };\n\n  const onPointerUpFromCanvasPointerDownHandler = (pointerDownState) => () => {\n    window.removeEventListener(\n      \"pointermove\",\n      pointerDownState.eventListeners.onMove\n    );\n    window.removeEventListener(\n      \"pointerup\",\n      pointerDownState.eventListeners.onUp\n    );\n  };\n  return (\n    <div className=\"free-draw\">\n      <div className=\"container\" ref={canvasContainer}>\n        <canvas\n          ref={canvasRef}\n          className=\"canvas\"\n          onPointerDown={handleCanvasPointerDown}\n        >\n          绘制canvas\n        </canvas>\n      </div>\n      <MarkDown src={doc} />\n    </div>\n  );\n});\n\nexport default Canvas;\n","import { unstable_batchedUpdates } from \"react-dom\";\n\nexport const sceneCoordsToViewportCoords = (\n  { sceneX, sceneY },\n  { offsetLeft, offsetTop, scrollX, scrollY }\n) => {\n  const x = sceneX + scrollX + offsetLeft;\n  const y = sceneY + scrollY + offsetTop;\n  return { x, y };\n};\nexport const viewportCoordsToSceneCoords = (\n  { clientX, clientY },\n  { zoom, offsetLeft, offsetTop, scrollX, scrollY }\n) => {\n  const zoomValue = zoom ? zoom.value : 1;\n  const x = (clientX - offsetLeft) / zoomValue - scrollX;\n  const y = (clientY - offsetTop) / zoomValue - scrollY;\n  return { x, y };\n};\n\n//rgb颜色随机\nexport const rgb = () => {\n  const r = Math.floor(Math.random() * 256);\n  const g = Math.floor(Math.random() * 256);\n  const b = Math.floor(Math.random() * 256);\n  return `rgb(${r},${g},${b})`;\n};\n\nexport const throttleRAF = (fn, opts) => {\n  let timerId = null;\n  let lastArgs = null;\n  let lastArgsTrailing = null;\n\n  const scheduleFunc = (args) => {\n    timerId = window.requestAnimationFrame(() => {\n      timerId = null;\n      fn(...args);\n      lastArgs = null;\n      if (lastArgsTrailing) {\n        lastArgs = lastArgsTrailing;\n        lastArgsTrailing = null;\n        scheduleFunc(lastArgs);\n      }\n    });\n  };\n\n  const ret = (...args) => {\n    if (process.env.NODE_ENV === \"test\") {\n      fn(...args);\n      return;\n    }\n    lastArgs = args;\n    if (timerId === null) {\n      scheduleFunc(lastArgs);\n    } else if (opts?.trailing) {\n      lastArgsTrailing = args;\n    }\n  };\n  ret.flush = () => {\n    if (timerId !== null) {\n      cancelAnimationFrame(timerId);\n      timerId = null;\n    }\n    if (lastArgs) {\n      fn(...(lastArgsTrailing || lastArgs));\n      lastArgs = lastArgsTrailing = null;\n    }\n  };\n  ret.cancel = () => {\n    lastArgs = lastArgsTrailing = null;\n    if (timerId !== null) {\n      cancelAnimationFrame(timerId);\n      timerId = null;\n    }\n  };\n  return ret;\n};\nexport const withBatchedUpdatesThrottled = (func) => {\n  return throttleRAF((event) => {\n    unstable_batchedUpdates(func, event);\n  });\n};\n\nexport const getBoundsFromPoints = (element) => {\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let points = element.points;\n  if (element.type === \"freedraw\") {\n    points = element.points.map((p) => {\n      return [p[0] - element.x, p[1] - element.y];\n    });\n  }\n  for (const [x, y] of points) {\n    minX = Math.min(minX, x);\n    minY = Math.min(minY, y);\n    maxX = Math.max(maxX, x);\n    maxY = Math.max(maxY, y);\n  }\n\n  return [minX, minY, maxX, maxY];\n};\n\nexport const rotate = (x1, y1, x2, y2, angle) =>\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2,\n  ];\n\nexport const getElementBounds = (element) => {\n  let bounds;\n\n  const [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(element);\n\n  if (element.type === \"freedraw\") {\n    const [minX, minY, maxX, maxY] = getBoundsFromPoints(element);\n\n    return [\n      minX + element.x,\n      minY + element.y,\n      maxX + element.x,\n      maxY + element.y,\n    ];\n  } else {\n    const [x11, y11] = rotate(x1, y1, cx, cy, element.angle);\n    const [x12, y12] = rotate(x1, y2, cx, cy, element.angle);\n    const [x22, y22] = rotate(x2, y2, cx, cy, element.angle);\n    const [x21, y21] = rotate(x2, y1, cx, cy, element.angle);\n    const minX = Math.min(x11, x12, x22, x21);\n    const minY = Math.min(y11, y12, y22, y21);\n    const maxX = Math.max(x11, x12, x22, x21);\n    const maxY = Math.max(y11, y12, y22, y21);\n    bounds = [minX, minY, maxX, maxY];\n  }\n\n  return bounds;\n};\nexport const getCommonBounds = (elements) => {\n  if (!elements.length) {\n    return [0, 0, 0, 0];\n  }\n\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n\n  elements.forEach((element) => {\n    const [x1, y1, x2, y2] = getElementBounds(element);\n    minX = Math.min(minX, x1);\n    minY = Math.min(minY, y1);\n    maxX = Math.max(maxX, x2);\n    maxY = Math.max(maxY, y2);\n  });\n\n  return [minX, minY, maxX, maxY];\n};\nexport const getElementAbsoluteCoords = (element) => {\n  if (element.type === \"freedraw\") {\n    const [minX, minY, maxX, maxY] = getBoundsFromPoints(element);\n    const x1 = minX + element.x;\n    const y1 = minY + element.y;\n    const x2 = maxX + element.x;\n    const y2 = maxY + element.y;\n    return [x1, y1, x2, y2, (x1 + x2) / 2, (y1 + y2) / 2];\n  }\n  return [\n    element.x,\n    element.y,\n    element.x + element.width,\n    element.y + element.height,\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  ];\n};\n\nexport const distance = (x, y) => Math.abs(x - y);\n\nexport const getSizeFromPoints = (points) => {\n  const xs = points.map((point) => point[0]);\n  const ys = points.map((point) => point[1]);\n  return {\n    width: Math.max(...xs) - Math.min(...xs),\n    height: Math.max(...ys) - Math.min(...ys),\n  };\n};\n\nlet testIdBase = 0;\nexport const randomId = () => `id${testIdBase++}`;\nexport const randomInteger = () => Math.floor(Math.random() * 2 ** 31);\n\nexport const generateExcalidrawElements = () => {\n  const freeDrawElements =\n    JSON.parse(localStorage.getItem(\"free-draw-elements\")) || [];\n  const result = freeDrawElements.map((ele) => {\n    const points = ele.points.map((p) => {\n      return [p[0] - ele.x, p[1] - ele.y];\n    });\n    const { width, height } = getSizeFromPoints(points);\n    return {\n      id: randomId(),\n      type: \"freedraw\",\n      x: ele.x,\n      y: ele.y,\n      width: width,\n      height: height,\n      angle: 0,\n      strokeColor: ele.strokeStyle,\n      backgroundColor: \"transparent\",\n      fillStyle: \"hachure\",\n      strokeWidth: 1,\n      strokeStyle: \"solid\",\n      roughness: 1,\n      opacity: 100,\n      groupIds: [],\n      roundness: null,\n      seed: randomInteger(),\n      version: 1,\n      versionNonce: 0,\n      isDeleted: false,\n      boundElements: null,\n      updated: Date.now(),\n      link: null,\n      locked: false,\n      points: points,\n      pressures: [],\n      simulatePressure: true,\n      lastCommittedPoint: points[points.length - 1],\n    };\n  });\n  return result;\n};\n\n// for worker\n// window.__generateExcalidrawElements = generateExcalidrawElements;\n\nexport const getFontString = ({ fontSize, fontFamily }) => {\n  return `${fontSize}px ${fontFamily}, Segoe UI Emoji`;\n};\n"],"names":["src","useState","mdText","setMdText","useEffect","fetch","then","response","text","className","children","rehypePlugins","rehypeRaw","remarkPlugins","remarkGfm","components","code","node","inline","props","match","exec","String","replace","language","PreTag","canvas","appState","ctx","context","getContext","clearRect","width","height","elements","ele","save","beginPath","lineWidth","strokeStyle","points","forEach","point","index","lineTo","moveTo","stroke","restore","localStorage","setItem","JSON","stringify","parse","getItem","offsetLeft","offsetTop","scrollX","scrollY","draggingElement","memo","canvasRef","useRef","canvasContainer","current","offsetWidth","offsetHeight","window","devicePixelRatio","scale","renderScene","wrap","handleWheel","e","preventDefault","addEventListener","passive","removeEventListener","onPointerMoveFromCanvasPointerDownHandler","pointerDownState","event","pointerCoords","viewportCoordsToSceneCoords","push","x","y","onPointerUpFromCanvasPointerDownHandler","eventListeners","onMove","onUp","ref","onPointerDown","origin","lastCoords","element","strokeColor","backgroundColor","fillStyle","strokeWidth","rgb","onPointerMove","onPointerUp","doc","clientX","clientY","zoom","zoomValue","value","r","Math","floor","random","g","b","withBatchedUpdatesThrottled","func","fn","opts","timerId","lastArgs","lastArgsTrailing","scheduleFunc","args","requestAnimationFrame","ret","trailing","flush","cancelAnimationFrame","cancel","throttleRAF","unstable_batchedUpdates","getBoundsFromPoints","minX","Infinity","minY","maxX","maxY","type","map","p","min","max","rotate","x1","y1","x2","y2","angle","cos","sin","getElementBounds","getElementAbsoluteCoords","cx","cy","x11","y11","x12","y12","x22","y22","x21","y21","getCommonBounds","length","distance","abs","testIdBase","randomId","getFontString","fontSize","fontFamily"],"sourceRoot":""}