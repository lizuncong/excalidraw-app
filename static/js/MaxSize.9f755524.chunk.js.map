{"version":3,"file":"static/js/MaxSize.9f755524.chunk.js","mappings":"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","sources":["components/markdown/index.jsx","pages/max-size/util.js","pages/max-size/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport rehypeRaw from \"rehype-raw\";\n// import { tomorrow } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport \"github-markdown-css\";\n\nimport './index.less'\n\n\nfunction Shapes({ src }) {\n  const [mdText, setMdText] = useState(\"\");\n  useEffect(() => {\n    fetch(src)\n      .then((response) => response.text())\n      .then((text) => {\n        setMdText(text);\n      });\n  }, [src]);\n  return (\n    <div className=\"markdown-body\">\n      <ReactMarkdown\n        children={mdText}\n        rehypePlugins={[rehypeRaw]}\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ node, inline, className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || \"\");\n            return !inline && match ? (\n              <SyntaxHighlighter\n                children={String(children).replace(/\\n$/, \"\")}\n                // style={{ background: 'red'}}\n                language={match[1]}\n                className=\"my-code\"\n                PreTag=\"div\"\n                {...props}\n              />\n            ) : (\n              <code className={className} {...props}>\n                {children}\n              </code>\n            );\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Shapes;\n","import { isCanvasExceedsMaximumSize } from \"./index\";\nconst resolvablePromise = () => {\n  let resolve;\n  let reject;\n  const promise = new Promise((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  promise.resolve = resolve;\n  promise.reject = reject;\n  return promise;\n};\nconst areaPromise = resolvablePromise();\nlet areaCount = 0;\nvar channel = new MessageChannel();\nvar port = channel.port2;\nchannel.port1.onmessage = workLoop;\n\nconst yieldInterval = 5; // 单位毫秒\nlet maxWidth = 0;\nlet max = maxWidth * 1000;\nlet min = maxWidth;\nlet maxHeight = 0;\nfunction workLoop() {\n  const currentEventStartTime = new Date().getTime();\n\n  while (min < max) {\n    areaCount++;\n    if (areaCount > 1000) {\n      // 加个阀值，防止死循环，返回0表示算法错误导致获取失败\n      return 0;\n    }\n    const height = Math.floor(max / maxWidth);\n    // console.log(\"finding...\", height, max, min);\n\n    if (isCanvasExceedsMaximumSize(maxWidth, height)) {\n      maxHeight = Math.min(height, maxHeight);\n      max = parseInt((min + max) / 2);\n    } else {\n      min = max;\n      max = Math.min(max * 2, maxWidth * maxHeight);\n    }\n    // 执行完当前工作，则判断时间是否超过5ms，如果超过，则退出while循环\n    if (new Date().getTime() - currentEventStartTime > yieldInterval) {\n      // console.log(\"break...\", new Date().getTime() - currentEventStartTime);\n      // 执行耗时超过了5ms，结束本轮事件，主动让出控制权给浏览器绘制页面或者执行其他操作\n      break;\n    }\n  }\n  // 如果还有剩余的工作，则放到下一个事件中处理\n  if (min < max) {\n    port.postMessage(null);\n  } else {\n    areaPromise.resolve({ max, areaCount });\n  }\n}\n\nexport const getMaxArea = (maxW) => {\n  max = maxW * 10;\n  min = maxW;\n  maxWidth = maxW;\n  maxHeight = maxW;\n  port.postMessage(null);\n  return areaPromise.then((res) => {\n    console.log(`最大面积：${res.max}，尝试了${areaCount}次`);\n    return Promise.resolve(res)\n  });\n};\n","import React, { useRef, useState, useEffect } from \"react\";\nimport MarkDown from \"@/components/markdown\";\nimport doc from \"../../../doc/canvas最大尺寸限制.md\";\nimport \"./index.less\";\nimport { getMaxArea } from \"./util\";\nlet count = 0;\nexport const isCanvasExceedsMaximumSize = (width, height) => {\n  const testCvs = document.createElement(\"canvas\");\n  testCvs.width = width;\n  testCvs.height = height;\n  const testCtx = testCvs.getContext(\"2d\");\n  testCtx.fillRect(width - 1, height - 1, 1, 1);\n\n  const cropCvs = document.createElement(\"canvas\");\n  cropCvs.width = 1;\n  cropCvs.height = 1;\n  const cropCtx = cropCvs.getContext(\"2d\");\n  cropCtx.drawImage(testCvs, width - 1, height - 1, 1, 1, 0, 0, 1, 1);\n\n  const isTestPass = cropCtx && cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;\n\n  return !isTestPass;\n};\n\nconst getMaxWidth = () => {\n  let max = 65535;\n  let min = 1000;\n  let maxW = Infinity;\n  while (min < max) {\n    count++;\n    if (count > 1000) {\n      // 加个阀值，防止死循环，返回0表示算法错误导致获取失败\n      return 0;\n    }\n    console.log('find width...', maxW, max, min)\n    if (isCanvasExceedsMaximumSize(max, 1)) {\n      maxW = Math.min(max, maxW)\n      max = parseInt((min + max) / 2);\n    } else {\n      min = max;\n      max = Math.min(max * 2, maxW);\n    }\n  }\n  console.log(`最大宽度：尝试了${count}次`);\n  return max;\n};\nconst maxWidth = getMaxWidth();\nfunction Index() {\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(maxWidth);\n  const [height, setHeight] = useState(1);\n  const [areaRes, setAreaRes] = useState({ max: \"--\", areaCount: \"--\" });\n\n  const draw = () => {\n    const startTime = new Date().getTime();\n    const canvas = canvasRef.current;\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = \"red\";\n    ctx.fillRect(0, 0, 300 + Math.random() * 1000, 300);\n\n    console.log(`绘制耗时：${new Date().getTime() - startTime}毫秒`);\n  };\n  useEffect(() => {\n    getMaxArea(maxWidth).then((res) => {\n      setAreaRes(res);\n    });\n  }, []);\n  return (\n    <>\n      <div className=\"row\">\n        最大宽度：{maxWidth}，最大高度：{maxWidth}，算法查找次数：{count}\n      </div>\n      <div>\n        最大面积：{areaRes.max}，算法查找次数：{areaRes.areaCount}\n      </div>\n      <div className=\"row\">\n        宽度：\n        <input\n          type=\"number\"\n          value={width}\n          onChange={(e) => setWidth(Number(e.target.value))}\n        />\n      </div>\n      <div className=\"row\">\n        高度：\n        <input\n          type=\"number\"\n          value={height}\n          onChange={(e) => setHeight(Number(e.target.value))}\n        />\n      </div>\n      <div>\n        <button className=\"btn\" onClick={() => draw()}>\n          点击绘制canvas\n        </button>\n      </div>\n      <canvas ref={canvasRef} className=\"canvas\">\n        绘制canvas\n      </canvas>\n      <MarkDown src={doc} />\n    </>\n  );\n}\n\nexport default Index;\n"],"names":["src","useState","mdText","setMdText","useEffect","fetch","then","response","text","className","children","rehypePlugins","rehypeRaw","remarkPlugins","remarkGfm","components","code","node","inline","props","match","exec","String","replace","language","PreTag","areaPromise","resolve","reject","promise","Promise","_resolve","_reject","resolvablePromise","areaCount","channel","MessageChannel","port","port2","port1","onmessage","currentEventStartTime","Date","getTime","min","max","height","Math","floor","maxWidth","isCanvasExceedsMaximumSize","maxHeight","parseInt","postMessage","count","width","testCvs","document","createElement","getContext","fillRect","cropCvs","cropCtx","drawImage","getImageData","data","maxW","Infinity","console","log","getMaxWidth","canvasRef","useRef","setWidth","setHeight","areaRes","setAreaRes","res","type","value","onChange","e","Number","target","onClick","startTime","canvas","current","ctx","clearRect","fillStyle","random","draw","ref","doc"],"sourceRoot":""}