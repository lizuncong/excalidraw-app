{"version":3,"file":"static/js/Canvas.fcf1bd72.chunk.js","mappings":"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","sources":["pages/canvas/util.js","pages/canvas/renderer/renderElement.js","pages/canvas/renderer/renderScene.js","pages/canvas/scene/scene.js","pages/canvas/index.jsx","pages/canvas/element/newElement.js","pages/canvas/element/dragElements.js","pages/canvas/element/mutateElement.js"],"sourcesContent":["export const viewportCoordsToSceneCoords = (\n  { clientX, clientY },\n  { offsetLeft, offsetTop, scrollX, scrollY }\n) => {\n  const x = clientX - offsetLeft - scrollX;\n  const y = clientY - offsetTop - scrollY;\n  return { x, y };\n};\n\nexport const distance = (x, y) => Math.abs(x - y);\nlet testIdBase = 0;\n\nexport const randomId = () => `id${testIdBase++}`;\n","export const renderElement = (element, context, renderConfig, appState) => {\n  switch (element.type) {\n    case \"rectangle\": {\n      generateElementShape(element);\n      const elementWithCanvas = generateElementWithCanvas(\n        element,\n        renderConfig\n      );\n      drawElementFromCanvas(elementWithCanvas, context, renderConfig);\n\n      break;\n    }\n    default: {\n      throw new Error(`Unimplemented type ${element.type}`);\n    }\n  }\n};\n\nconst shapeCache = new WeakMap();\nconst elementWithCanvasCache = new WeakMap();\nconst generateElementShape = (element) => {\n  let shape = shapeCache.get(element);\n\n  if (shape === undefined) {\n    elementWithCanvasCache.delete(element);\n\n    switch (element.type) {\n      case \"rectangle\":\n        if (element.roundness) {\n          // const w = element.width;\n          // const h = element.height;\n          //   const r = getCornerRadius(Math.min(w, h), element);\n          //   shape = generator.path(\n          //     `M ${r} 0 L ${w - r} 0 Q ${w} 0, ${w} ${r} L ${w} ${\n          //       h - r\n          //     } Q ${w} ${h}, ${w - r} ${h} L ${r} ${h} Q 0 ${h}, 0 ${\n          //       h - r\n          //     } L 0 ${r} Q 0 0, ${r} 0`,\n          //     generateRoughOptions(element, true)\n          //   );\n        }\n        setShapeForElement(element, shape);\n\n        break;\n      default: {\n        throw new Error(`Unimplemented type ${element.type}`);\n      }\n    }\n  }\n};\n\nconst generateElementWithCanvas = (element, renderConfig) => {\n  const zoom = renderConfig.zoom || 1;\n  const prevElementWithCanvas = elementWithCanvasCache.get(element);\n\n  if (!prevElementWithCanvas) {\n    const elementWithCanvas = generateElementCanvas(\n      element,\n      zoom,\n      renderConfig\n    );\n\n    elementWithCanvasCache.set(element, elementWithCanvas);\n\n    return elementWithCanvas;\n  }\n  return prevElementWithCanvas;\n};\n\nconst generateElementCanvas = (element, zoom, renderConfig) => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  const padding = getCanvasPadding(element);\n\n  let canvasOffsetX = 0;\n  let canvasOffsetY = 0;\n\n  canvas.width =\n    element.width * window.devicePixelRatio * zoom + padding * zoom * 2;\n  canvas.height =\n    element.height * window.devicePixelRatio * zoom + padding * zoom * 2;\n\n  context.save();\n  context.translate(padding * zoom, padding * zoom);\n  context.scale(window.devicePixelRatio * zoom, window.devicePixelRatio * zoom);\n\n  drawElementOnCanvas(element, context, renderConfig);\n  context.restore();\n\n  return {\n    element,\n    canvas,\n    theme: renderConfig.theme,\n    canvasZoom: zoom,\n    canvasOffsetX,\n    canvasOffsetY,\n  };\n};\n\nconst drawElementOnCanvas = (element, context, renderConfig) => {\n  context.globalAlpha = element.opacity / 100;\n  switch (element.type) {\n    case \"rectangle\": {\n      context.lineJoin = \"round\";\n      context.lineCap = \"round\";\n      context.strokeStyle = 'red'\n      context.strokeRect(20,20,150,100);\n      // rc.draw(getShapeForElement(element)!);\n      break;\n    }\n\n    default: {\n    }\n  }\n  context.globalAlpha = 1;\n};\nexport const setShapeForElement = (element, shape) =>\n  shapeCache.set(element, shape);\n\nconst getCanvasPadding = (element) =>\n  element.type === \"freedraw\" ? element.strokeWidth * 12 : 20;\n\nconst drawElementFromCanvas = (elementWithCanvas, context, renderConfig) => {\n  const element = elementWithCanvas.element;\n  console.log('elementWithCanvas...', elementWithCanvas)\n  const padding = getCanvasPadding(element);\n  let [x1, y1, x2, y2] = [\n    element.x,\n    element.y,\n    element.x + element.width,\n    element.y + element.height,\n  ];\n\n  const cx = ((x1 + x2) / 2 + renderConfig.scrollX) * window.devicePixelRatio;\n  const cy = ((y1 + y2) / 2 + renderConfig.scrollY) * window.devicePixelRatio;\n\n  context.save();\n  context.scale(1 / window.devicePixelRatio, 1 / window.devicePixelRatio);\n\n  context.translate(cx, cy);\n\n  context.drawImage(\n    elementWithCanvas.canvas,\n    (-(x2 - x1) / 2) * window.devicePixelRatio -\n      (padding * elementWithCanvas.canvasZoom) / elementWithCanvas.canvasZoom,\n    (-(y2 - y1) / 2) * window.devicePixelRatio -\n      (padding * elementWithCanvas.canvasZoom) / elementWithCanvas.canvasZoom,\n    elementWithCanvas.canvas.width / elementWithCanvas.canvasZoom,\n    elementWithCanvas.canvas.height / elementWithCanvas.canvasZoom\n  );\n\n  context.restore();\n\n  // Clear the nested element we appended to the DOM\n};\n","import { renderElement } from './renderElement'\nexport const drawAxis = (ctx, { scrollX, scrollY }) => {\n  ctx.save();\n\n  const rectH = 100; // 纵轴刻度间距\n  const rectW = 100; // 横轴刻度间距\n  const tickLength = 8; // 刻度线长度\n  const canvas = ctx.canvas;\n  ctx.translate(scrollX, scrollY);\n  ctx.strokeStyle = \"red\";\n  ctx.fillStyle = \"red\";\n  // 绘制横轴和纵轴\n  ctx.save();\n  ctx.beginPath();\n  ctx.setLineDash([10, 10]);\n  ctx.moveTo(0, -scrollY);\n  ctx.lineTo(0, canvas.height - scrollY);\n  ctx.moveTo(-scrollX, 0);\n  ctx.lineTo(canvas.width - scrollX, 0);\n  ctx.stroke();\n  ctx.restore();\n  // 绘制横轴和纵轴刻度\n  ctx.beginPath();\n  ctx.lineWidth = 2;\n  ctx.textBaseline = \"middle\";\n  for (let i = 0; i < scrollY / rectH; i++) {\n    // 绘制纵轴刻度\n    ctx.moveTo(0, -i * rectH);\n    ctx.lineTo(tickLength, -i * rectH);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(-i, -25, -i * rectH);\n  }\n  for (let i = 0; i < (canvas.height - scrollY) / rectH; i++) {\n    // 绘制纵轴刻度\n    ctx.moveTo(0, i * rectH);\n    ctx.lineTo(tickLength, i * rectH);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(i, -25, i * rectH);\n  }\n  for (let i = 1; i < scrollX / rectW; i++) {\n    // 绘制横轴刻度\n    ctx.moveTo(-i * rectW, 0);\n    ctx.lineTo(-i * rectW, tickLength);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(-i, -i * rectW - 10, -15);\n  }\n  for (let i = 1; i < (canvas.width - scrollX) / rectW; i++) {\n    // 绘制横轴刻度\n    ctx.moveTo(i * rectW, 0);\n    ctx.lineTo(i * rectW, tickLength);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(i, i * rectW - 5, -15);\n  }\n  ctx.stroke();\n\n  ctx.restore();\n};\n\nexport const renderScene = ({\n  elements,\n  appState,\n  scale,\n  canvas,\n  renderConfig,\n}) => {\n  const context = canvas.getContext(\"2d\");\n\n  context.setTransform(1, 0, 0, 1, 0, 0);\n  context.save();\n  context.scale(scale, scale);\n  // When doing calculations based on canvas width we should used normalized one\n  const normalizedCanvasWidth = canvas.width / scale;\n  const normalizedCanvasHeight = canvas.height / scale;\n  if (renderConfig.viewBackgroundColor) {\n    context.save();\n    context.fillStyle = renderConfig.viewBackgroundColor;\n    context.fillRect(0, 0, normalizedCanvasWidth, normalizedCanvasHeight);\n    context.restore();\n  }\n\n  // Apply zoom\n  context.save();\n  context.scale(renderConfig.zoom, renderConfig.zoom);\n\n  // render element\n  elements.forEach((element) => {\n    renderElement(element, context, renderConfig, appState);\n  });\n  // Reset zoom\n  context.restore();\n\n  context.restore();\n};\n\nexport const renderCanvas = (ctx, renderConfig) => {\n  const canvas = ctx.canvas;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  drawAxis(ctx, renderConfig);\n};\n","class Scene {\n  constructor() {\n    this.elements = [];\n  }\n  getElementsIncludingDeleted() {\n    return this.elements;\n  }\n  replaceAllElements(nextElements) {\n    this.elements = nextElements;\n  }\n}\n\nexport default Scene;\n","import React, { memo, useRef, useEffect } from \"react\";\nimport { viewportCoordsToSceneCoords, distance } from \"./util\";\nimport { dragNewElement } from \"./element/dragElements\";\nimport { newElement } from \"./element/newElement\";\nimport { renderCanvas, renderScene } from \"./renderer/renderScene\";\nimport Scene from \"./scene/scene\";\nimport \"./index.less\";\nconst scene = new Scene();\nlet appState = {\n  scrollX: 0,\n  scrollY: 0,\n  offsetLeft: 0,\n  offsetTop: 0,\n  draggingElement: null,\n  currentItemStrokeColor: \"#000000\",\n  currentItemBackgroundColor: \"transparent\",\n  currentItemFillStyle: \"hachure\",\n  currentItemStrokeWidth: 1,\n  currentItemStrokeStyle: \"solid\",\n  currentItemRoughness: 1,\n  currentItemOpacity: 100,\n};\nconst Canvas = memo(() => {\n  const canvasRef = useRef(null);\n  const canvasContainer = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const { offsetWidth, offsetHeight, offsetLeft, offsetTop } = canvas;\n\n    canvas.width = offsetWidth * window.devicePixelRatio;\n    canvas.height = offsetHeight * window.devicePixelRatio;\n    appState.offsetLeft = offsetLeft;\n    appState.offsetTop = offsetTop;\n    renderCanvas(ctx, appState);\n  }, []);\n  useEffect(() => {\n    const wrap = canvasContainer.current;\n    const handleWheel = (e) => {\n      e.preventDefault();\n    };\n    // 防止双指滑动时切换页面\n    wrap.addEventListener(\"wheel\", handleWheel, {\n      passive: false,\n    });\n    return () => {\n      wrap.removeEventListener(\"wheel\", handleWheel);\n    };\n  }, []);\n  const handleCanvasWheel = (event) => {\n    const { deltaX, deltaY } = event;\n    appState.scrollX = appState.scrollX - deltaX;\n    appState.scrollY = appState.scrollY - deltaY;\n\n    // renderCanvas(canvasRef.current.getContext(\"2d\"), appState);\n\n    console.log(\"wheel\", appState.scrollX, appState.scrollY);\n  };\n\n  const handleCanvasPointerDown = (event) => {\n    const pointerDownState = initialPointerDownState(event);\n    createGenericElementOnPointerDown(\"rectangle\", pointerDownState);\n    const onPointerMove =\n      onPointerMoveFromCanvasPointerDownHandler(pointerDownState);\n    const onPointerUp =\n      onPointerUpFromCanvasPointerDownHandler(pointerDownState);\n    window.addEventListener(\"pointermove\", onPointerMove);\n    window.addEventListener(\"pointerup\", onPointerUp);\n    pointerDownState.eventListeners.onMove = onPointerMove;\n    pointerDownState.eventListeners.onUp = onPointerUp;\n  };\n  const createGenericElementOnPointerDown = (elementType, pointerDownState) => {\n    const element = newElement({\n      type: elementType,\n      x: pointerDownState.origin.x,\n      y: pointerDownState.origin.y,\n      strokeColor: appState.currentItemStrokeColor,\n      backgroundColor: appState.currentItemBackgroundColor,\n      fillStyle: appState.currentItemFillStyle,\n      strokeWidth: appState.currentItemStrokeWidth,\n      strokeStyle: appState.currentItemStrokeStyle,\n      roughness: appState.currentItemRoughness,\n      opacity: appState.currentItemOpacity,\n      roundness: null,\n      locked: false,\n    });\n    scene.replaceAllElements([...scene.getElementsIncludingDeleted(), element]);\n    appState.draggingElement = element;\n  };\n  const onPointerUpFromCanvasPointerDownHandler =\n    (pointerDownState) => (event) => {\n      window.removeEventListener(\n        \"pointermove\",\n        pointerDownState.eventListeners.onMove\n      );\n      window.removeEventListener(\n        \"pointerup\",\n        pointerDownState.eventListeners.onUp\n      );\n    };\n  const onPointerMoveFromCanvasPointerDownHandler =\n    (pointerDownState) => (event) => {\n      const pointerCoords = viewportCoordsToSceneCoords(event, appState);\n      pointerDownState.lastCoords.x = pointerCoords.x;\n      pointerDownState.lastCoords.y = pointerCoords.y;\n      maybeDragNewGenericElement(pointerDownState, event);\n      renderScene({\n        elements: scene.getElementsIncludingDeleted(),\n        appState: appState,\n        scale: window.devicePixelRatio,\n        canvas: canvasRef.current,\n        renderConfig: {\n          selectionColor: '#6965db',\n          scrollX: appState.scrollX,\n          scrollY: appState.scrollY,\n          viewBackgroundColor: '#ffffff',\n          zoom: 1,\n        },\n      });\n    };\n  const maybeDragNewGenericElement = (pointerDownState, event) => {\n    const pointerCoords = pointerDownState.lastCoords;\n    const draggingElement = appState.draggingElement;\n    dragNewElement(\n      draggingElement,\n      \"rectangle\",\n      pointerDownState.origin.x,\n      pointerDownState.origin.y,\n      pointerCoords.x,\n      pointerCoords.y,\n      distance(pointerDownState.origin.x, pointerCoords.x),\n      distance(pointerDownState.origin.y, pointerCoords.y),\n      false,\n      false,\n      null\n    );\n  };\n  const initialPointerDownState = (event) => {\n    const origin = viewportCoordsToSceneCoords(event, appState);\n    return {\n      origin,\n      lastCoords: { ...origin },\n      eventListeners: {\n        onMove: null,\n        onUp: null,\n        onKeyUp: null,\n        onKeyDown: null,\n      },\n    };\n  };\n\n  return (\n    <div ref={canvasContainer}>\n      <canvas\n        onWheel={handleCanvasWheel}\n        onPointerDown={handleCanvasPointerDown}\n        // onPointerUp={(e) => {\n        //   window.removeEventListener(\"pointermove\", handleWindowPointerMove);\n        // }}\n        ref={canvasRef}\n        className=\"canvas\"\n      >\n        绘制canvas\n      </canvas>\n    </div>\n  );\n});\n\nexport default Canvas;\n","import { randomId } from '../util'\nexport const newElement = ({\n  type,\n  x,\n  y,\n  strokeColor,\n  backgroundColor,\n  fillStyle,\n  strokeWidth,\n  strokeStyle,\n  roughness,\n  opacity,\n  width = 0,\n  height = 0,\n  angle = 0,\n  groupIds = [],\n  roundness = null,\n  boundElements = null,\n  link = null,\n  locked,\n  ...rest\n}) => {\n    return  {\n    id: randomId(),\n    type,\n    x,\n    y,\n    width,\n    height,\n    angle,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    strokeStyle,\n    roughness,\n    opacity,\n    groupIds,\n    roundness,\n    version: rest.version || 1,\n    versionNonce: rest.versionNonce ?? 0,\n    isDeleted: false,\n    boundElements,\n    updated: Date.now(),\n    link,\n    locked,\n  };\n};\n","import { mutateElement } from './mutateElement'\nexport const dragNewElement = (\n  draggingElement,\n  elementType,\n  originX,\n  originY,\n  x,\n  y,\n  width,\n  height,\n  shouldMaintainAspectRatio,\n  shouldResizeFromCenter,\n  widthAspectRatio\n) => {\n  let newX = x < originX ? originX - width : originX;\n  let newY = y < originY ? originY - height : originY;\n  if (width !== 0 && height !== 0) {\n    mutateElement(draggingElement, {\n      x: newX,\n      y: newY,\n      width,\n      height,\n    });\n  }\n};\n","export const mutateElement = (element, updates, informMutation = true) => {\n  for (const key in updates) {\n    const value = updates[key];\n    if (typeof value !== \"undefined\") {\n      element[key] = value;\n    }\n  }\n\n  return element;\n};\n"],"names":["viewportCoordsToSceneCoords","clientX","clientY","offsetLeft","offsetTop","x","scrollX","y","scrollY","distance","Math","abs","testIdBase","shapeCache","WeakMap","elementWithCanvasCache","generateElementShape","element","shape","get","undefined","delete","type","Error","roundness","setShapeForElement","generateElementWithCanvas","renderConfig","zoom","prevElementWithCanvas","elementWithCanvas","generateElementCanvas","set","canvas","document","createElement","context","getContext","padding","getCanvasPadding","width","window","devicePixelRatio","height","save","translate","scale","drawElementOnCanvas","restore","theme","canvasZoom","canvasOffsetX","canvasOffsetY","globalAlpha","opacity","lineJoin","lineCap","strokeStyle","strokeRect","strokeWidth","drawElementFromCanvas","console","log","x1","y1","x2","y2","cx","cy","drawImage","renderScene","elements","appState","setTransform","normalizedCanvasWidth","normalizedCanvasHeight","viewBackgroundColor","fillStyle","fillRect","forEach","renderElement","this","nextElements","scene","Scene","draggingElement","currentItemStrokeColor","currentItemBackgroundColor","currentItemFillStyle","currentItemStrokeWidth","currentItemStrokeStyle","currentItemRoughness","currentItemOpacity","Canvas","memo","canvasRef","useRef","canvasContainer","useEffect","current","ctx","offsetWidth","offsetHeight","clearRect","rectH","rectW","beginPath","setLineDash","moveTo","lineTo","stroke","lineWidth","textBaseline","i","font","fillText","drawAxis","renderCanvas","wrap","handleWheel","e","preventDefault","addEventListener","passive","removeEventListener","createGenericElementOnPointerDown","elementType","pointerDownState","strokeColor","backgroundColor","roughness","angle","groupIds","boundElements","link","locked","rest","id","version","versionNonce","isDeleted","updated","Date","now","newElement","origin","replaceAllElements","getElementsIncludingDeleted","onPointerUpFromCanvasPointerDownHandler","event","eventListeners","onMove","onUp","onPointerMoveFromCanvasPointerDownHandler","pointerCoords","lastCoords","maybeDragNewGenericElement","selectionColor","originX","originY","shouldMaintainAspectRatio","shouldResizeFromCenter","widthAspectRatio","updates","key","value","mutateElement","dragNewElement","initialPointerDownState","onKeyUp","onKeyDown","ref","onWheel","deltaX","deltaY","onPointerDown","onPointerMove","onPointerUp","className"],"sourceRoot":""}