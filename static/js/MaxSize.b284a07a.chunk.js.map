{"version":3,"file":"static/js/MaxSize.b284a07a.chunk.js","mappings":"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","sources":["components/markdown/index.jsx","pages/max-size/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport rehypeRaw from \"rehype-raw\";\n// import { tomorrow } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport \"github-markdown-css\";\n\nimport './index.less'\n\n\nfunction Shapes({ src }) {\n  const [mdText, setMdText] = useState(\"\");\n  useEffect(() => {\n    fetch(src)\n      .then((response) => response.text())\n      .then((text) => {\n        setMdText(text);\n      });\n  }, [src]);\n  return (\n    <div className=\"markdown-body\">\n      <ReactMarkdown\n        children={mdText}\n        rehypePlugins={[rehypeRaw]}\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ node, inline, className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || \"\");\n            return !inline && match ? (\n              <SyntaxHighlighter\n                children={String(children).replace(/\\n$/, \"\")}\n                // style={{ background: 'red'}}\n                language={match[1]}\n                className=\"my-code\"\n                PreTag=\"div\"\n                {...props}\n              />\n            ) : (\n              <code className={className} {...props}>\n                {children}\n              </code>\n            );\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Shapes;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport MarkDown from \"@/components/markdown\";\nimport doc from \"../../../doc/canvas最大尺寸限制.md\";\nimport \"./index.less\";\n\nlet count = 0;\nconst isCanvasExceedsMaximumSize = (width, height) => {\n  const testCvs = document.createElement(\"canvas\");\n  testCvs.width = width;\n  testCvs.height = height;\n  const testCtx = testCvs.getContext(\"2d\");\n  testCtx.fillRect(width - 1, height - 1, 1, 1);\n\n  const cropCvs = document.createElement(\"canvas\");\n  cropCvs.width = 1;\n  cropCvs.height = 1;\n  const cropCtx = cropCvs.getContext(\"2d\");\n  cropCtx.drawImage(testCvs, width - 1, height - 1, 1, 1, 0, 0, 1, 1);\n\n  const isTestPass = cropCtx && cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;\n\n  return !isTestPass;\n};\n\nconst getMaxWidth = () => {\n  let max = 65535;\n  const step = 1000;\n  let min = 1000;\n  while (min < max) {\n    count++;\n    if (count > 1000) {\n      // 加个阀值，防止死循环，返回0表示算法错误导致获取失败\n      return 0;\n    }\n    if (isCanvasExceedsMaximumSize(max, 1)) {\n      max = parseInt((min + max) / 2);\n    } else {\n      min = max;\n      max = max + step;\n    }\n  }\n  console.log(`最大宽度：尝试了${count}次`);\n  return max;\n};\nconst maxWidth = getMaxWidth();\n\nlet areaCount = 0;\nconst getMaxArea = () => {\n  let max = maxWidth * maxWidth;\n  const step = maxWidth;\n  let min = maxWidth;\n  while (min < max) {\n    areaCount++;\n    if (areaCount > 1000) {\n      // 加个阀值，防止死循环，返回0表示算法错误导致获取失败\n      return 0;\n    }\n    if (isCanvasExceedsMaximumSize(maxWidth, max / maxWidth)) {\n      max = parseInt((min + max) / 2);\n    } else {\n      min = max;\n      max = max + step;\n    }\n    console.log('max area...')\n  }\n  console.log(`最大面积：尝试了${areaCount}次`);\n  return max;\n};\nconst maxArea = getMaxArea();\n\nfunction Index() {\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(maxWidth);\n  const [height, setHeight] = useState(1);\n  const draw = () => {\n    const canvas = canvasRef.current;\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = \"red\";\n    ctx.fillRect(0, 0, 300, 300);\n  };\n  useEffect(() => {\n  }, []);\n  return (\n    <>\n      <div className=\"row\">\n        最大宽度：{maxWidth}，最大高度：{maxWidth}，算法查找次数：{count}\n      </div>\n      <div>\n        最大面积：{maxArea}，算法查找次数：{areaCount}\n      </div>\n      <div className=\"row\">\n        宽度：\n        <input\n          type=\"number\"\n          value={width}\n          onChange={(e) => setWidth(Number(e.target.value))}\n        />\n      </div>\n      <div className=\"row\">\n        高度：\n        <input\n          type=\"number\"\n          value={height}\n          onChange={(e) => setHeight(Number(e.target.value))}\n        />\n      </div>\n      <div>\n        <button className=\"btn\" onClick={() => draw()}>\n          点击绘制canvas\n        </button>\n      </div>\n      <canvas ref={canvasRef} className=\"canvas\">\n        绘制canvas\n      </canvas>\n      <MarkDown src={doc} />\n    </>\n  );\n}\n\nexport default Index;\n"],"names":["src","useState","mdText","setMdText","useEffect","fetch","then","response","text","className","children","rehypePlugins","rehypeRaw","remarkPlugins","remarkGfm","components","code","node","inline","props","match","exec","String","replace","language","PreTag","count","isCanvasExceedsMaximumSize","width","height","testCvs","document","createElement","getContext","fillRect","cropCvs","cropCtx","drawImage","getImageData","data","maxWidth","max","min","parseInt","console","log","getMaxWidth","areaCount","maxArea","step","getMaxArea","canvasRef","useRef","setWidth","setHeight","type","value","onChange","e","Number","target","onClick","canvas","current","ctx","clearRect","fillStyle","draw","ref","doc"],"sourceRoot":""}