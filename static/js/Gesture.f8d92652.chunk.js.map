{"version":3,"file":"static/js/Gesture.f8d92652.chunk.js","mappings":"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","sources":["pages/gesture/renderScene.js","pages/gesture/useGesture.js","pages/gesture/index.jsx","pages/gesture/zoom.js","util/gesture.js","util/zoom.js"],"sourcesContent":["import { elements } from \"./index\";\nconst drawAxis = (ctx, { zoom, scrollX, scrollY }) => {\n  ctx.save();\n  const rectH = 100 * zoom.value; // 纵轴刻度间距\n  const rectW = 100 * zoom.value; // 横轴刻度间距\n  const tickLength = 8 * zoom.value; // 刻度线长度\n  const canvas = ctx.canvas;\n  const offsetX = scrollX * zoom.value;\n  const offsetY = scrollY * zoom.value;\n  ctx.translate(offsetX, offsetY);\n  ctx.strokeStyle = \"red\";\n  ctx.fillStyle = \"red\";\n  // 绘制横轴和纵轴\n  ctx.save();\n  ctx.beginPath();\n  ctx.setLineDash([10, 10]);\n  ctx.moveTo(0, -offsetY);\n  ctx.lineTo(0, canvas.height - offsetY);\n  ctx.moveTo(-offsetX, 0);\n  ctx.lineTo(canvas.width - offsetX, 0);\n  ctx.stroke();\n  ctx.restore();\n  // 绘制横轴和纵轴刻度\n  ctx.beginPath();\n  ctx.lineWidth = 2;\n  ctx.textBaseline = \"middle\";\n  for (let i = 0; i < offsetY / rectH; i++) {\n    // 绘制纵轴负数刻度\n    ctx.moveTo(0, -i * rectH);\n    ctx.lineTo(tickLength, -i * rectH);\n    ctx.font = `${20 * zoom.value}px Arial`;\n    ctx.fillText(-i, -25, -i * rectH);\n  }\n  for (let i = 0; i < (canvas.height - offsetY) / rectH; i++) {\n    // 绘制纵轴正数刻度\n    ctx.moveTo(0, i * rectH);\n    ctx.lineTo(tickLength, i * rectH);\n    ctx.font = `${20 * zoom.value}px Arial`;\n    ctx.fillText(i, -25, i * rectH);\n  }\n  for (let i = 1; i < offsetX / rectW; i++) {\n    // 绘制横轴负数刻度\n    ctx.moveTo(-i * rectW, 0);\n    ctx.lineTo(-i * rectW, tickLength);\n    ctx.font = `${20 * zoom.value}px Arial`;\n    ctx.fillText(-i, -i * rectW - 10, -15);\n  }\n  for (let i = 1; i < (canvas.width - offsetX) / rectW; i++) {\n    // 绘制横轴正数刻度\n    ctx.moveTo(i * rectW, 0);\n    ctx.lineTo(i * rectW, tickLength);\n    ctx.font = `${20 * zoom.value}px Arial`;\n    ctx.fillText(i, i * rectW - 5, -15);\n  }\n  ctx.stroke();\n\n  ctx.restore();\n};\nconst renderElements = (ctx, appState) => {\n  elements.forEach((ele) => {\n    ctx.save();\n    // ctx.translate(\n    //   (ele.x + appState.scrollX) * appState.zoom.value,\n    //   (ele.y + appState.scrollY) * appState.zoom.value\n    // );\n    // ctx.translate(ele.x + appState.scrollX, ele.y + appState.scrollY);\n    ctx.scale(appState.zoom.value, appState.zoom.value);\n    ctx.translate(ele.x + appState.scrollX, ele.y + appState.scrollY);\n    ctx.strokeStyle = ele.strokeStyle;\n    ctx.strokeColor = ele.strokeColor;\n    ctx.strokeRect(0, 0, ele.width, ele.height);\n    ctx.restore();\n  });\n};\nconst renderScene = (canvas, appState) => {\n  const context = canvas.getContext(\"2d\");\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  drawAxis(context, appState);\n  renderElements(context, appState);\n};\n\nexport default renderScene;\n","import { useEffect } from \"react\";\nimport { getCenter, getDistance } from \"@/util/gesture\";\nimport { getNormalizedZoom, getStateForZoom } from \"@/util/zoom\";\n\nconst gesture = {\n  pointers: new Map(),\n  lastCenter: null,\n  initialDistance: null,\n  initialScale: null,\n};\n\nexport const useGesture = (canvasRef, appState) => {\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const onTouchEnd = (event) => {\n      if (!event.touches.length) {\n        gesture.pointers.clear();\n      }\n    };\n    canvas.addEventListener(\"touchend\", onTouchEnd);\n    return () => {\n      canvas.removeEventListener(\"touchend\", onTouchEnd);\n    };\n  }, [canvasRef]);\n  const removePointer = (event) => {\n    gesture.pointers.delete(event.pointerId);\n  };\n  const updateGestureOnPointerDown = (event) => {\n    gesture.pointers.set(event.pointerId, {\n      x: event.clientX,\n      y: event.clientY,\n    });\n\n    if (gesture.pointers.size === 2) {\n      gesture.lastCenter = getCenter(gesture.pointers);\n      gesture.initialScale = appState.zoom.value;\n      gesture.initialDistance = getDistance(\n        Array.from(gesture.pointers.values())\n      );\n    }\n  };\n  const handleCanvasPointerMove = (event, callback) => {\n    if (gesture.pointers.has(event.pointerId)) {\n      gesture.pointers.set(event.pointerId, {\n        x: event.clientX,\n        y: event.clientY,\n      });\n    }\n    const initialScale = gesture.initialScale;\n\n    if (\n      gesture.pointers.size === 2 &&\n      gesture.lastCenter &&\n      initialScale &&\n      gesture.initialDistance\n    ) {\n      const center = getCenter(gesture.pointers);\n      const deltaX = center.x - gesture.lastCenter.x;\n      const deltaY = center.y - gesture.lastCenter.y;\n      gesture.lastCenter = center;\n\n      const distance = getDistance(Array.from(gesture.pointers.values()));\n      const scaleFactor = distance / gesture.initialDistance;\n\n      const nextZoom = scaleFactor\n        ? getNormalizedZoom(initialScale * scaleFactor)\n        : appState.zoom.value;\n      const zoomState = getStateForZoom(\n        {\n          viewportX: center.x,\n          viewportY: center.y,\n          nextZoom,\n        },\n        appState\n      );\n      Object.assign(appState, {\n        zoom: zoomState.zoom,\n        scrollX: zoomState.scrollX + deltaX / nextZoom,\n        scrollY: zoomState.scrollY + deltaY / nextZoom,\n      });\n      callback();\n    } else {\n      gesture.lastCenter =\n        gesture.initialDistance =\n        gesture.initialScale =\n          null;\n    }\n  };\n  return {\n    gesture,\n    removePointer,\n    updateGestureOnPointerDown,\n    handleCanvasPointerMove,\n  };\n};\n","import React, { memo, useRef, useEffect } from \"react\";\nimport renderScene from \"./renderScene\";\nimport { getNormalizedZoom, getStateForZoom } from \"./zoom\";\nimport { useGesture } from \"./useGesture\";\nimport \"./index.less\";\nconst appState = {\n  zoom: { value: 1 },\n  offsetLeft: 0,\n  offsetTop: 0,\n  scrollX: 0,\n  scrollY: 0,\n  draggingElement: null,\n};\nconst ZOOM_STEP = 0.1;\nexport const elements = [];\nconst viewportCoordsToSceneCoords = (\n  { clientX, clientY },\n  { zoom, offsetLeft, offsetTop, scrollX, scrollY }\n) => {\n  const x = (clientX - offsetLeft) / zoom.value - scrollX;\n  const y = (clientY - offsetTop) / zoom.value - scrollY;\n  return { x, y };\n};\nconst Canvas = memo(() => {\n  const canvasRef = useRef(null);\n  const canvasContainer = useRef(null);\n  const cursorPosition = useRef({});\n  const scaleRef = useRef();\n  useEffect(() => {\n    const render = () => {\n      const canvas = canvasRef.current;\n      const context = canvas.getContext(\"2d\");\n      const { offsetWidth, offsetHeight, offsetLeft, offsetTop } = canvas;\n      canvas.width = offsetWidth * window.devicePixelRatio;\n      canvas.height = offsetHeight * window.devicePixelRatio;\n      context.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n      appState.offsetLeft = offsetLeft;\n      appState.offsetTop = offsetTop;\n      renderScene(canvas, appState);\n    };\n    render();\n    const resize = () => {\n      render();\n    };\n    window.addEventListener(\"resize\", resize);\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n  useEffect(() => {\n    const wrap = canvasContainer.current;\n    const handleWheel = (e) => {\n      e.preventDefault();\n    };\n    // 防止双指滑动时切换页面\n    wrap.addEventListener(\"wheel\", handleWheel, {\n      passive: false,\n    });\n    const updateCurrentCursorPosition = (event) => {\n      cursorPosition.current = {\n        cursorX: event.clientX,\n        cursorY: event.clientY,\n      };\n    };\n    document.addEventListener(\"mousemove\", updateCurrentCursorPosition);\n    return () => {\n      wrap.removeEventListener(\"wheel\", handleWheel);\n      document.removeEventListener(\"mousemove\", updateCurrentCursorPosition);\n    };\n  }, []);\n  const {\n    updateGestureOnPointerDown,\n    handleCanvasPointerMove,\n    removePointer,\n    gesture,\n  } = useGesture(canvasRef, appState);\n  const handleCanvasPointerDown = (event) => {\n    updateGestureOnPointerDown(event);\n    if (gesture.pointers.size > 1) {\n      return;\n    }\n    const origin = viewportCoordsToSceneCoords(event, appState);\n    const pointerDownState = {\n      origin,\n      lastCoords: { ...origin },\n      eventListeners: {\n        onMove: null,\n        onUp: null,\n      },\n    };\n    const element = {\n      x: pointerDownState.origin.x,\n      y: pointerDownState.origin.y,\n      width: 0,\n      height: 0,\n      strokeColor: \"#000000\",\n      backgroundColor: \"transparent\",\n      fillStyle: \"hachure\",\n      strokeWidth: 1,\n      strokeStyle: \"solid\",\n    };\n    appState.draggingElement = element;\n    elements.push(element);\n    const onPointerMove =\n      onPointerMoveFromCanvasPointerDownHandler(pointerDownState);\n    const onPointerUp =\n      onPointerUpFromCanvasPointerDownHandler(pointerDownState);\n    window.addEventListener(\"pointermove\", onPointerMove);\n    window.addEventListener(\"pointerup\", onPointerUp);\n    pointerDownState.eventListeners.onMove = onPointerMove;\n    pointerDownState.eventListeners.onUp = onPointerUp;\n  };\n  const onPointerUpFromCanvasPointerDownHandler =\n    (pointerDownState) => (event) => {\n      removePointer(event);\n      window.removeEventListener(\n        \"pointermove\",\n        pointerDownState.eventListeners.onMove\n      );\n      window.removeEventListener(\n        \"pointerup\",\n        pointerDownState.eventListeners.onUp\n      );\n    };\n  const onPointerMoveFromCanvasPointerDownHandler =\n    (pointerDownState) => (event) => {\n      const pointerCoords = viewportCoordsToSceneCoords(event, appState);\n      pointerDownState.lastCoords.x = pointerCoords.x;\n      pointerDownState.lastCoords.y = pointerCoords.y;\n      // maybeDragNewGenericElement(pointerDownState, event);\n      appState.draggingElement.width =\n        pointerCoords.x - pointerDownState.origin.x;\n      appState.draggingElement.height =\n        pointerCoords.y - pointerDownState.origin.y;\n      renderScene(canvasRef.current, appState);\n    };\n  const handleCanvasWheel = (event) => {\n    const { deltaX, deltaY } = event;\n    // 关于缩放：双指放大时，deltaY是负数，缩小时，deltaY是正数\n    // 缩放，本质上就是对某个点的坐标进行变换\n    if (event.metaKey || event.ctrlKey) {\n      const sign = Math.sign(deltaY); // 只有两种情况，要么+1，要么-1\n      const MAX_STEP = ZOOM_STEP * 100; // 10\n      const absDelta = Math.abs(deltaY);\n      let delta = deltaY;\n      // delta最大为10\n      if (absDelta > MAX_STEP) {\n        delta = MAX_STEP * sign;\n      }\n      let newZoom = appState.zoom.value - delta / 100;\n      newZoom +=\n        Math.log10(Math.max(1, appState.zoom.value)) *\n        -sign *\n        Math.min(1, absDelta / 20);\n      const nextZoom = getNormalizedZoom(newZoom);\n      Object.assign(appState, {\n        ...getStateForZoom(\n          {\n            viewportX: cursorPosition.current.cursorX,\n            viewportY: cursorPosition.current.cursorY,\n            nextZoom: nextZoom,\n          },\n          appState\n        ),\n      });\n      scaleRef.current.innerText = `${(nextZoom * 100).toFixed(0)}%`;\n      renderScene(canvasRef.current, appState);\n\n      return;\n    }\n    //\n    appState.scrollX = appState.scrollX - deltaX / appState.zoom.value;\n    appState.scrollY = appState.scrollY - deltaY / appState.zoom.value;\n    renderScene(canvasRef.current, appState);\n  };\n\n  return (\n    <div className=\"gesture\">\n      <div ref={canvasContainer}>\n        <canvas\n          ref={canvasRef}\n          className=\"canvas\"\n          onPointerDown={handleCanvasPointerDown}\n          onPointerCancel={removePointer}\n          onPointerMove={(event) => {\n            handleCanvasPointerMove(event, () => {\n              renderScene(canvasRef.current, appState);\n            });\n          }}\n          onWheel={handleCanvasWheel}\n        >\n          绘制canvas\n        </canvas>\n      </div>\n      <div>\n        <button\n          onClick={() => {\n            let minX = Infinity;\n            let maxX = -Infinity;\n            let minY = Infinity;\n            let maxY = -Infinity;\n\n            elements.forEach((element) => {\n              const [x1, y1, x2, y2] = [\n                element.x,\n                element.y,\n                element.x + element.width,\n                element.y + element.height,\n              ];\n              minX = Math.min(minX, x1);\n              minY = Math.min(minY, y1);\n              maxX = Math.max(maxX, x2);\n              maxY = Math.max(maxY, y2);\n            });\n\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = (maxX - minX + 20) * window.devicePixelRatio;\n            canvas.height = (maxY - minY + 20) * window.devicePixelRatio;\n            const context = canvas.getContext(\"2d\");\n            context.scale(window.devicePixelRatio, window.devicePixelRatio);\n            renderScene(canvas, {\n              ...appState,\n              scrollX: -minX + 10,\n              scrollY: -minY + 10,\n            });\n            var a = document.createElement(\"a\");\n            a.href = canvas.toDataURL();\n            a.download = \"canvas.png\";\n            a.click();\n          }}\n        >\n          导出PNG\n        </button>\n      </div>\n      <div ref={scaleRef}></div>\n      {/* <div className=\"tip\">温馨提示：可以在上面的画板中绘制矩形哦！！</div> */}\n      {/* <MarkDown src={doc} /> */}\n    </div>\n  );\n});\n\nexport default Canvas;\n","const MIN_ZOOM = 0.1;\n\nexport const getNormalizedZoom = (zoom) => {\n  return Math.max(MIN_ZOOM, Math.min(zoom, 30));\n};\n\n// export const getStateForZoom2 = (\n//   { viewportX, viewportY, nextZoom },\n//   appState\n// ) => {\n//   const appLayerX = viewportX - appState.offsetLeft;\n//   const appLayerY = viewportY - appState.offsetTop;\n\n//   const currentZoom = appState.zoom.value;\n\n//   const baseScrollX = appState.scrollX + (appLayerX - appLayerX / currentZoom);\n//   const baseScrollY = appState.scrollY + (appLayerY - appLayerY / currentZoom);\n\n//   const zoomOffsetScrollX = -(appLayerX - appLayerX / nextZoom);\n//   const zoomOffsetScrollY = -(appLayerY - appLayerY / nextZoom);\n\n//   return {\n//     scrollX: baseScrollX + zoomOffsetScrollX,\n//     scrollY: baseScrollY + zoomOffsetScrollY,\n//     zoom: {\n//       value: nextZoom,\n//     },\n//   };\n// };\n\n\nexport const getStateForZoom = (\n  { viewportX, viewportY, nextZoom },\n  appState\n) => {\n  const screenX = viewportX - appState.offsetLeft;\n  const screenY = viewportY - appState.offsetTop;\n  const currentZoom = appState.zoom.value;\n\n  return {\n    scrollX: appState.scrollX + screenX / nextZoom - screenX / currentZoom,\n    scrollY: appState.scrollY + screenY / nextZoom - screenY / currentZoom,\n    zoom: {\n      value: nextZoom,\n    }, \n  };\n};\n","export const getCenter = (pointers) => {\n  const allCoords = Array.from(pointers.values());\n  return {\n    x: sum(allCoords, (coords) => coords.x) / allCoords.length,\n    y: sum(allCoords, (coords) => coords.y) / allCoords.length,\n  };\n};\n\nexport const getDistance = ([a, b]) => Math.hypot(a.x - b.x, a.y - b.y);\n\nconst sum = (array, mapper) =>\n  array.reduce((acc, item) => acc + mapper(item), 0);\n","const MIN_ZOOM = 0.1;\n\nexport const getNormalizedZoom = (zoom) => {\n  return Math.max(MIN_ZOOM, Math.min(zoom, 30));\n};\n\nexport const getStateForZoom = (\n  { viewportX, viewportY, nextZoom },\n  appState\n) => {\n  const screenX = viewportX - appState.offsetLeft;\n  const screenY = viewportY - appState.offsetTop;\n  const currentZoom = appState.zoom.value;\n\n  return {\n    scrollX: appState.scrollX + screenX / nextZoom - screenX / currentZoom,\n    scrollY: appState.scrollY + screenY / nextZoom - screenY / currentZoom,\n    zoom: {\n      value: nextZoom,\n    },\n  };\n};\n"],"names":["canvas","appState","context","getContext","clearRect","width","height","ctx","zoom","scrollX","scrollY","save","rectH","value","rectW","tickLength","offsetX","offsetY","translate","strokeStyle","fillStyle","beginPath","setLineDash","moveTo","lineTo","stroke","restore","lineWidth","textBaseline","i","font","fillText","drawAxis","elements","ele","scale","x","y","strokeColor","strokeRect","renderElements","gesture","pointers","Map","lastCenter","initialDistance","initialScale","useGesture","canvasRef","useEffect","current","onTouchEnd","event","touches","length","clear","addEventListener","removeEventListener","removePointer","delete","pointerId","updateGestureOnPointerDown","set","clientX","clientY","size","getCenter","getDistance","Array","from","values","handleCanvasPointerMove","callback","has","center","deltaX","deltaY","scaleFactor","nextZoom","getNormalizedZoom","zoomState","getStateForZoom","viewportX","viewportY","Object","assign","offsetLeft","offsetTop","draggingElement","viewportCoordsToSceneCoords","Canvas","memo","useRef","canvasContainer","cursorPosition","scaleRef","render","offsetWidth","offsetHeight","window","devicePixelRatio","renderScene","resize","wrap","handleWheel","e","preventDefault","passive","updateCurrentCursorPosition","cursorX","cursorY","document","onPointerUpFromCanvasPointerDownHandler","pointerDownState","eventListeners","onMove","onUp","onPointerMoveFromCanvasPointerDownHandler","pointerCoords","lastCoords","origin","className","ref","onPointerDown","element","backgroundColor","strokeWidth","push","onPointerMove","onPointerUp","onPointerCancel","onWheel","metaKey","ctrlKey","sign","Math","absDelta","abs","delta","ZOOM_STEP","newZoom","max","min","log10","screenX","screenY","currentZoom","innerText","toFixed","onClick","minX","Infinity","maxX","minY","maxY","forEach","x1","y1","x2","y2","createElement","a","href","toDataURL","download","click","allCoords","sum","coords","b","hypot","array","mapper","reduce","acc","item"],"sourceRoot":""}