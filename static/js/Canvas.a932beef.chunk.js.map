{"version":3,"file":"static/js/Canvas.a932beef.chunk.js","mappings":"gLAsEaA,EAAe,SAACC,EAAKC,GAChC,IAAMC,EAASF,EAAIE,OACnBF,EAAIG,UAAU,EAAG,EAAGD,EAAOE,MAAOF,EAAOG,QA3DnB,SAACL,EAAI,GAA2B,IAAxBM,EAAO,EAAPA,QAASC,EAAO,EAAPA,QACvCP,EAAIQ,OAEJ,IAAMC,EAAQ,IACRC,EAAQ,IAERR,EAASF,EAAIE,OACnBF,EAAIW,UAAUL,EAASC,GACvBP,EAAIY,YAAc,MAClBZ,EAAIa,UAAY,MAEhBb,EAAIQ,OACJR,EAAIc,YACJd,EAAIe,YAAY,CAAC,GAAI,KACrBf,EAAIgB,OAAO,GAAIT,GACfP,EAAIiB,OAAO,EAAGf,EAAOG,OAASE,GAC9BP,EAAIgB,QAAQV,EAAS,GACrBN,EAAIiB,OAAOf,EAAOE,MAAQE,EAAS,GACnCN,EAAIkB,SACJlB,EAAImB,UAEJnB,EAAIc,YACJd,EAAIoB,UAAY,EAChBpB,EAAIqB,aAAe,SACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAUE,EAAOa,IAEnCtB,EAAIgB,OAAO,GAAIM,EAAIb,GACnBT,EAAIiB,OAtBa,GAsBOK,EAAIb,GAC5BT,EAAIuB,KAAO,aACXvB,EAAIwB,UAAUF,GAAI,IAAKA,EAAIb,GAE7B,IAAK,IAAIa,EAAI,EAAGA,GAAKpB,EAAOG,OAASE,GAAWE,EAAOa,IAErDtB,EAAIgB,OAAO,EAAGM,EAAIb,GAClBT,EAAIiB,OA7Ba,EA6BMK,EAAIb,GAC3BT,EAAIuB,KAAO,aACXvB,EAAIwB,SAASF,GAAI,GAAIA,EAAIb,GAE3B,IAAK,IAAIa,EAAI,EAAGA,EAAIhB,EAAUI,EAAOY,IAEnCtB,EAAIgB,QAAQM,EAAIZ,EAAO,GACvBV,EAAIiB,QAAQK,EAAIZ,EApCC,GAqCjBV,EAAIuB,KAAO,aACXvB,EAAIwB,UAAUF,GAAIA,EAAIZ,EAAQ,IAAK,IAErC,IAAK,IAAIY,EAAI,EAAGA,GAAKpB,EAAOE,MAAQE,GAAWI,EAAOY,IAEpDtB,EAAIgB,OAAOM,EAAIZ,EAAO,GACtBV,EAAIiB,OAAOK,EAAIZ,EA3CE,GA4CjBV,EAAIuB,KAAO,aACXvB,EAAIwB,SAASF,EAAGA,EAAIZ,EAAQ,GAAI,IAElCV,EAAIkB,SAEJlB,EAAImB,SACN,CAKEM,CAASzB,EAAKC,GAzEa,SAACyB,EAAQ,GAA2B,IAAxBpB,EAAO,EAAPA,QAASC,EAAO,EAAPA,QAChDmB,EAAQlB,OACRkB,EAAQf,UAAU,GAAKL,EAAS,GAAKC,GACrCmB,EAAQb,UAAY,wBAEpBa,EAAQC,SAAS,EAAG,EAAG,IAAK,KAC5BD,EAAQN,UAAY,EACpBM,EAAQd,YAAc,qBACtBc,EAAQE,WAAW,EAAG,EAAG,IAAK,KAE9BF,EAAQP,SACV,CA+DEU,CAAc7B,EAAKC,EACrB,E,SCvEM6B,GAASC,EAAAA,EAAAA,OAAK,WAClB,IAAMC,GAAYC,EAAAA,EAAAA,QAAO,MACnBC,GAAkBD,EAAAA,EAAAA,QAAO,MACzBE,GAAiBF,EAAAA,EAAAA,QAAO,CAC5B3B,QAAS,EACTC,QAAS,EACT6B,WAAY,EACZC,UAAW,KAEbC,EAAAA,EAAAA,YAAU,WACR,IAAMpC,EAAS8B,EAAUO,QACnBvC,EAAME,EAAOsC,WAAW,MACtBC,EAAqDvC,EAArDuC,YAAaC,EAAwCxC,EAAxCwC,aAAcN,EAA0BlC,EAA1BkC,WAAYC,EAAcnC,EAAdmC,UAE/CnC,EAAOE,MAAQqC,EAAcE,OAAOC,iBACpC1C,EAAOG,OAASqC,EAAeC,OAAOC,iBACtCT,EAAeI,QAAQH,WAAaA,EACpCD,EAAeI,QAAQF,UAAYA,EACnCtC,EAAaC,EAAKmC,EAAeI,QACnC,GAAG,KACHD,EAAAA,EAAAA,YAAU,WACR,IAAMO,EAAOX,EAAgBK,QACvBO,EAAc,SAACC,GACnBA,EAAEC,gBACJ,EAKA,OAHAH,EAAKI,iBAAiB,QAASH,EAAa,CAC1CI,SAAS,IAEJ,WACLL,EAAKM,oBAAoB,QAASL,EACpC,CACF,GAAG,IACH,IAaMM,EAA0B,SAACC,GAC/BC,QAAQC,IAAI,mCAAoCF,EAAMG,OACxD,EAcA,OACE,gBAAKC,IAAKvB,EAAgB,UACxB,mBACEwB,QAhCoB,SAACL,GACzB,IAAQM,EAAmBN,EAAnBM,OAAQC,EAAWP,EAAXO,OAChBzB,EAAeI,QAAQjC,QAAU6B,EAAeI,QAAQjC,QAAUqD,EAClExB,EAAeI,QAAQhC,QAAU4B,EAAeI,QAAQhC,QAAUqD,EAElE7D,EAAaiC,EAAUO,QAAQC,WAAW,MAAOL,EAAeI,SAEhEe,QAAQC,IACN,QACApB,EAAeI,QAAQjC,QACvB6B,EAAeI,QAAQhC,QAE3B,EAqBMsD,cAjB0B,SAACR,GAE/BC,QAAQC,IAAI,kBAAmBF,GAC/BV,OAAOM,iBAAiB,cAAeG,EACzC,EAcMU,YAAa,SAACf,GACZJ,OAAOQ,oBAAoB,cAAeC,EAC5C,EACAK,IAAKzB,EACL+B,UAAU,SAAQ,iCAM1B,IAEA,G","sources":["pages/canvas/renderer.js","pages/canvas/index.jsx"],"sourcesContent":["export const drawSelection = (context, { scrollX, scrollY }) => {\n  context.save();\n  context.translate(20 + scrollX, 20 + scrollY);\n  context.fillStyle = \"rgba(0, 0, 200, 0.04)\";\n\n  context.fillRect(0, 0, 200, 200);\n  context.lineWidth = 1;\n  context.strokeStyle = \"rgb(105, 101, 219)\";\n  context.strokeRect(0, 0, 200, 200);\n\n  context.restore();\n};\n\nexport const drawAxis = (ctx, { scrollX, scrollY }) => {\n  ctx.save();\n\n  const rectH = 100; // 纵轴刻度间距\n  const rectW = 100; // 横轴刻度间距\n  const tickLength = 8; // 刻度线长度\n  const canvas = ctx.canvas;\n  ctx.translate(scrollX, scrollY);\n  ctx.strokeStyle = 'red'\n  ctx.fillStyle = 'red'\n  // 绘制横轴和纵轴\n  ctx.save();\n  ctx.beginPath();\n  ctx.setLineDash([10, 10]);\n  ctx.moveTo(0, -scrollY);\n  ctx.lineTo(0, canvas.height - scrollY);\n  ctx.moveTo(-scrollX, 0);\n  ctx.lineTo(canvas.width - scrollX, 0);\n  ctx.stroke();\n  ctx.restore();\n  // 绘制横轴和纵轴刻度\n  ctx.beginPath();\n  ctx.lineWidth = 2;\n  ctx.textBaseline = \"middle\";\n  for (let i = 0; i < scrollY / rectH; i++) {\n    // 绘制纵轴刻度\n    ctx.moveTo(0, -i * rectH);\n    ctx.lineTo(tickLength, -i * rectH);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(-i, -25, -i * rectH);\n  }\n  for (let i = 0; i < (canvas.height - scrollY) / rectH; i++) {\n    // 绘制纵轴刻度\n    ctx.moveTo(0, i * rectH);\n    ctx.lineTo(tickLength, i * rectH);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(i, -25, i * rectH);\n  }\n  for (let i = 1; i < scrollX / rectW; i++) {\n    // 绘制横轴刻度\n    ctx.moveTo(-i * rectW, 0);\n    ctx.lineTo(-i * rectW, tickLength);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(-i, -i * rectW - 10, -15);\n  }\n  for (let i = 1; i < (canvas.width - scrollX) / rectW; i++) {\n    // 绘制横轴刻度\n    ctx.moveTo(i * rectW, 0);\n    ctx.lineTo(i * rectW, tickLength);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(i, i * rectW - 5, -15);\n  }\n  ctx.stroke();\n\n  ctx.restore();\n};\n\nexport const renderCanvas = (ctx, renderConfig) => {\n  const canvas = ctx.canvas;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  drawAxis(ctx, renderConfig);\n  drawSelection(ctx, renderConfig);\n};\n","import React, { memo, useRef, useEffect } from \"react\";\n// import { viewportCoordsToSceneCoords } from \"./util\";\nimport { renderCanvas } from \"./renderer\";\nimport \"./index.less\";\nconst Canvas = memo(() => {\n  const canvasRef = useRef(null);\n  const canvasContainer = useRef(null);\n  const canvasStateRef = useRef({\n    scrollX: 0,\n    scrollY: 0,\n    offsetLeft: 0,\n    offsetTop: 0,\n  });\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const { offsetWidth, offsetHeight, offsetLeft, offsetTop } = canvas;\n\n    canvas.width = offsetWidth * window.devicePixelRatio;\n    canvas.height = offsetHeight * window.devicePixelRatio;\n    canvasStateRef.current.offsetLeft = offsetLeft;\n    canvasStateRef.current.offsetTop = offsetTop;\n    renderCanvas(ctx, canvasStateRef.current);\n  }, []);\n  useEffect(() => {\n    const wrap = canvasContainer.current;\n    const handleWheel = (e) => {\n      e.preventDefault();\n    };\n    // 防止双指滑动时切换页面\n    wrap.addEventListener(\"wheel\", handleWheel, {\n      passive: false,\n    });\n    return () => {\n      wrap.removeEventListener(\"wheel\", handleWheel);\n    };\n  }, []);\n  const handleCanvasWheel = (event) => {\n    const { deltaX, deltaY } = event;\n    canvasStateRef.current.scrollX = canvasStateRef.current.scrollX - deltaX;\n    canvasStateRef.current.scrollY = canvasStateRef.current.scrollY - deltaY;\n\n    renderCanvas(canvasRef.current.getContext(\"2d\"), canvasStateRef.current);\n\n    console.log(\n      \"wheel\",\n      canvasStateRef.current.scrollX,\n      canvasStateRef.current.scrollY\n    );\n  };\n  const handleWindowPointerMove = (event) => {\n    console.log(\"handleWindowPointerMove=========\", event.target);\n  };\n  const handleCanvasPointerDown = (event) => {\n    // const pointerDownState = this.initialPointerDownState(event);\n    console.log(\"pointer down===\", event);\n    window.addEventListener(\"pointermove\", handleWindowPointerMove);\n  };\n\n  // const initialPointerDownState = (event) => {\n  //   const origin = viewportCoordsToSceneCoords(\n  //     { clientX: event.clientX, clientY: event.clientY },\n  //     canvasStateRef.current\n  //   );\n  // };\n\n  return (\n    <div ref={canvasContainer}>\n      <canvas\n        onWheel={handleCanvasWheel}\n        onPointerDown={handleCanvasPointerDown}\n        onPointerUp={(e) => {\n          window.removeEventListener(\"pointermove\", handleWindowPointerMove);\n        }}\n        ref={canvasRef}\n        className=\"canvas\"\n      >\n        绘制canvas\n      </canvas>\n    </div>\n  );\n});\n\nexport default Canvas;\n"],"names":["renderCanvas","ctx","renderConfig","canvas","clearRect","width","height","scrollX","scrollY","save","rectH","rectW","translate","strokeStyle","fillStyle","beginPath","setLineDash","moveTo","lineTo","stroke","restore","lineWidth","textBaseline","i","font","fillText","drawAxis","context","fillRect","strokeRect","drawSelection","Canvas","memo","canvasRef","useRef","canvasContainer","canvasStateRef","offsetLeft","offsetTop","useEffect","current","getContext","offsetWidth","offsetHeight","window","devicePixelRatio","wrap","handleWheel","e","preventDefault","addEventListener","passive","removeEventListener","handleWindowPointerMove","event","console","log","target","ref","onWheel","deltaX","deltaY","onPointerDown","onPointerUp","className"],"sourceRoot":""}