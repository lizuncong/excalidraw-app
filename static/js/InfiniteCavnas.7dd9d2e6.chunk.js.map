{"version":3,"file":"static/js/InfiniteCavnas.7dd9d2e6.chunk.js","mappings":"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","sources":["components/markdown/index.jsx","pages/infinite-canvas/renderScene.js","pages/infinite-canvas/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport rehypeRaw from \"rehype-raw\";\n// import { tomorrow } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport \"github-markdown-css\";\n\nimport './index.less'\n\n\nfunction Shapes({ src }) {\n  const [mdText, setMdText] = useState(\"\");\n  useEffect(() => {\n    fetch(src)\n      .then((response) => response.text())\n      .then((text) => {\n        setMdText(text);\n      });\n  }, [src]);\n  return (\n    <div className=\"markdown-body\">\n      <ReactMarkdown\n        children={mdText}\n        rehypePlugins={[rehypeRaw]}\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ node, inline, className, children, ...props }) {\n            console.log(\"clasname...\", className);\n            const match = /language-(\\w+)/.exec(className || \"\");\n            return !inline && match ? (\n              <SyntaxHighlighter\n                children={String(children).replace(/\\n$/, \"\")}\n                // style={{ background: 'red'}}\n                language={match[1]}\n                className=\"my-code\"\n                PreTag=\"div\"\n                {...props}\n              />\n            ) : (\n              <code className={className} {...props}>\n                {children}\n              </code>\n            );\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Shapes;\n","const drawAxis = (ctx) => {\n  ctx.save();\n  const rectH = 100; // 纵轴刻度间距\n  const rectW = 100; // 横轴刻度间距\n  const tickLength = 8; // 刻度线长度\n  const canvas = ctx.canvas;\n  ctx.translate(0, 0);\n  ctx.strokeStyle = \"red\";\n  ctx.fillStyle = \"red\";\n  // 绘制横轴和纵轴\n  ctx.save();\n  ctx.beginPath();\n  ctx.setLineDash([10, 10]);\n  ctx.moveTo(0, 0);\n  ctx.lineTo(0, canvas.height);\n  ctx.moveTo(0, 0);\n  ctx.lineTo(canvas.width, 0);\n  ctx.stroke();\n  ctx.restore();\n  // 绘制横轴和纵轴刻度\n  ctx.beginPath();\n  ctx.lineWidth = 2;\n  ctx.textBaseline = \"middle\";\n\n  for (let i = 0; i < canvas.height / rectH; i++) {\n    // 绘制纵轴刻度\n    ctx.moveTo(0, i * rectH);\n    ctx.lineTo(tickLength, i * rectH);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(i, -25, i * rectH);\n  }\n  for (let i = 1; i < canvas.width / rectW; i++) {\n    // 绘制横轴刻度\n    ctx.moveTo(i * rectW, 0);\n    ctx.lineTo(i * rectW, tickLength);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(i, i * rectW - 5, -15);\n  }\n  ctx.stroke();\n\n  ctx.restore();\n};\n\nconst renderScene = (canvas) => {\n  const context = canvas.getContext('2d')\n  drawAxis(context)\n}\n\nexport default renderScene","import React, { memo, useRef, useEffect } from \"react\";\nimport MarkDown from \"@/components/markdown\";\nimport doc from \"../../../doc/canvas进阶/绘制矩形及无限画布.md\";\nimport renderScene from \"./renderScene\";\nimport \"./index.less\";\nconst appState = {\n  offsetLeft: 0,\n  offsetTop: 0,\n};\nconst viewportCoordsToSceneCoords = (\n  { clientX, clientY },\n  { offsetLeft, offsetTop }\n) => {\n  const x = clientX - offsetLeft;\n  const y = clientY - offsetTop;\n  return { x, y };\n};\nconst Canvas = memo(() => {\n  const canvasRef = useRef(null);\n  const canvasContainer = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    const { offsetWidth, offsetHeight, offsetLeft, offsetTop } = canvas;\n    canvas.width = offsetWidth * window.devicePixelRatio;\n    canvas.height = offsetHeight * window.devicePixelRatio;\n    context.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n    appState.offsetLeft = offsetLeft;\n    appState.offsetTop = offsetTop;\n    renderScene(canvas);\n  }, []);\n  const handleCanvasPointerDown = (event) => {\n    const origin = viewportCoordsToSceneCoords(event, appState);\n    const pointerDownState = {\n      origin,\n      lastCoords: { ...origin },\n    };\n    console.log('pointerDownState==',pointerDownState)\n    // createGenericElementOnPointerDown(\"rectangle\", pointerDownState);\n    // const onPointerMove =\n    //   onPointerMoveFromCanvasPointerDownHandler(pointerDownState);\n    // const onPointerUp =\n    //   onPointerUpFromCanvasPointerDownHandler(pointerDownState);\n    // window.addEventListener(\"pointermove\", onPointerMove);\n    // window.addEventListener(\"pointerup\", onPointerUp);\n    // pointerDownState.eventListeners.onMove = onPointerMove;\n    // pointerDownState.eventListeners.onUp = onPointerUp;\n  };\n  return (\n    <div ref={canvasContainer}>\n      <MarkDown src={doc} />\n      <canvas\n        ref={canvasRef}\n        className=\"canvas\"\n        onPointerDown={handleCanvasPointerDown}\n      >\n        绘制canvas\n      </canvas>\n    </div>\n  );\n});\n\nexport default Canvas;\n"],"names":["src","useState","mdText","setMdText","useEffect","fetch","then","response","text","className","children","rehypePlugins","rehypeRaw","remarkPlugins","remarkGfm","components","code","node","inline","props","console","log","match","exec","String","replace","language","PreTag","canvas","ctx","save","rectH","rectW","translate","strokeStyle","fillStyle","beginPath","setLineDash","moveTo","lineTo","height","width","stroke","restore","lineWidth","textBaseline","i","font","fillText","drawAxis","getContext","appState","offsetLeft","offsetTop","memo","canvasRef","useRef","canvasContainer","current","context","offsetWidth","offsetHeight","window","devicePixelRatio","scale","renderScene","ref","doc","onPointerDown","event","origin","clientX","clientY","x","y","viewportCoordsToSceneCoords","pointerDownState","lastCoords"],"sourceRoot":""}