{"version":3,"file":"static/js/Excalidraw.14302bfe.chunk.js","mappings":"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","sources":["pages/free-draw/draw-image/util.js","pages/free-draw/excalidraw/initialData.js","pages/free-draw/excalidraw/index.jsx"],"sourcesContent":["import { unstable_batchedUpdates } from \"react-dom\";\nexport const throttleRAF = (fn, opts) => {\n  let timerId = null;\n  let lastArgs = null;\n  let lastArgsTrailing = null;\n\n  const scheduleFunc = (args) => {\n    timerId = window.requestAnimationFrame(() => {\n      timerId = null;\n      fn(...args);\n      lastArgs = null;\n      if (lastArgsTrailing) {\n        lastArgs = lastArgsTrailing;\n        lastArgsTrailing = null;\n        scheduleFunc(lastArgs);\n      }\n    });\n  };\n\n  const ret = (...args) => {\n    if (process.env.NODE_ENV === \"test\") {\n      fn(...args);\n      return;\n    }\n    lastArgs = args;\n    if (timerId === null) {\n      scheduleFunc(lastArgs);\n    } else if (opts?.trailing) {\n      lastArgsTrailing = args;\n    }\n  };\n  ret.flush = () => {\n    if (timerId !== null) {\n      cancelAnimationFrame(timerId);\n      timerId = null;\n    }\n    if (lastArgs) {\n      fn(...(lastArgsTrailing || lastArgs));\n      lastArgs = lastArgsTrailing = null;\n    }\n  };\n  ret.cancel = () => {\n    lastArgs = lastArgsTrailing = null;\n    if (timerId !== null) {\n      cancelAnimationFrame(timerId);\n      timerId = null;\n    }\n  };\n  return ret;\n};\nexport const withBatchedUpdatesThrottled = (func) => {\n  return throttleRAF((event) => {\n    unstable_batchedUpdates(func, event);\n  });\n};\n\nexport const getBoundsFromPoints = (points) => {\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  for (const [x, y] of points) {\n    minX = Math.min(minX, x);\n    minY = Math.min(minY, y);\n    maxX = Math.max(maxX, x);\n    maxY = Math.max(maxY, y);\n  }\n\n  return [minX, minY, maxX, maxY];\n};\n\nexport const getElementAbsoluteCoords = (element) => {\n  const [minX, minY, maxX, maxY] = getBoundsFromPoints(element.points);\n  const x1 = minX + element.x;\n  const y1 = minY + element.y;\n  const x2 = maxX + element.x;\n  const y2 = maxY + element.y;\n  return [x1, y1, x2, y2, (x1 + x2) / 2, (y1 + y2) / 2];\n};\n\nexport const distance = (x, y) => Math.abs(x - y);\n\nexport const getSizeFromPoints = (points) => {\n  const xs = points.map((point) => point[0]);\n  const ys = points.map((point) => point[1]);\n  return {\n    width: Math.max(...xs) - Math.min(...xs),\n    height: Math.max(...ys) - Math.min(...ys),\n  };\n};\n\nlet testIdBase = 0;\nexport const randomId = () => `id${testIdBase++}`;\nexport const randomInteger = () => Math.floor(Math.random() * 2 ** 31);\n\nexport const generateExcalidrawElements = () => {\n  const freeDrawElements =\n    JSON.parse(localStorage.getItem(\"free-draw-elements\")) || [];\n  const result = freeDrawElements.map((ele) => {\n    const points = ele.points.map((p) => {\n      return [p[0] - ele.x, p[1] - ele.y];\n    });\n    const {width, height} = getSizeFromPoints(points);\n    return {\n      id: randomId(),\n      type: \"freedraw\",\n      x: ele.x,\n      y: ele.y,\n      width: width,\n      height: height,\n      angle: 0,\n      strokeColor: ele.strokeStyle,\n      backgroundColor: \"transparent\",\n      fillStyle: \"hachure\",\n      strokeWidth: 1,\n      strokeStyle: \"solid\",\n      roughness: 1,\n      opacity: 100,\n      groupIds: [],\n      roundness: null,\n      seed: randomInteger(),\n      version: 1,\n      versionNonce: 0,\n      isDeleted: false,\n      boundElements: null,\n      updated: Date.now(),\n      link: null,\n      locked: false,\n      points: points,\n      pressures: [],\n      simulatePressure: true,\n      lastCommittedPoint: points[points.length -1 ],\n    };\n  });\n  return result\n};\n\nwindow.__generateExcalidrawElements = generateExcalidrawElements;","const data = {\n  elements: [],\n  appState: { currentItemFontFamily: 1 },\n  // scrollToContent: true,\n};\n\nexport default data;\n","import React, { memo, useRef, useEffect } from \"react\";\nimport { Excalidraw } from \"@excalidraw/excalidraw\";\nimport \"./index.less\";\nimport initialData from './initialData'\nimport { generateExcalidrawElements } from '../draw-image/util'\nconst resolvablePromise = () => {\n  let resolve;\n  let reject;\n  const promise = new Promise((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  promise.resolve = resolve;\n  promise.reject = reject;\n  return promise;\n};\n\nconst Index = memo(() => {\n  const initialStatePromiseRef = useRef({ promise: null });\n  if (!initialStatePromiseRef.current.promise) {\n    initialStatePromiseRef.current.promise = resolvablePromise();\n  }\n  useEffect(() => {\n    initialData.elements = generateExcalidrawElements()\n    initialStatePromiseRef.current.promise.resolve(initialData);\n  }, []);\n  return (\n    <div className=\"excalidraw\">\n      <div className=\"container\">\n        <Excalidraw\n          initialData={initialStatePromiseRef.current.promise}\n        ></Excalidraw>\n      </div>\n    </div>\n  );\n});\n\nexport default Index;\n"],"names":["withBatchedUpdatesThrottled","func","fn","opts","timerId","lastArgs","lastArgsTrailing","scheduleFunc","args","window","requestAnimationFrame","ret","trailing","flush","cancelAnimationFrame","cancel","throttleRAF","event","unstable_batchedUpdates","getElementAbsoluteCoords","element","points","minX","Infinity","minY","maxX","maxY","x","y","Math","min","max","getBoundsFromPoints","x1","y1","x2","y2","distance","abs","testIdBase","generateExcalidrawElements","JSON","parse","localStorage","getItem","map","ele","p","xs","point","ys","width","height","getSizeFromPoints","id","type","angle","strokeColor","strokeStyle","backgroundColor","fillStyle","strokeWidth","roughness","opacity","groupIds","roundness","seed","floor","random","version","versionNonce","isDeleted","boundElements","updated","Date","now","link","locked","pressures","simulatePressure","lastCommittedPoint","length","__generateExcalidrawElements","elements","appState","currentItemFontFamily","memo","initialStatePromiseRef","useRef","promise","current","resolve","reject","Promise","_resolve","_reject","resolvablePromise","useEffect","initialData","className","Excalidraw"],"sourceRoot":""}