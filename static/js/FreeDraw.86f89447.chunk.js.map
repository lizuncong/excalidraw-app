{"version":3,"file":"static/js/FreeDraw.86f89447.chunk.js","mappings":"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","sources":["components/markdown/index.jsx","util/index.js","pages/free-draw/renderScene.js","pages/free-draw/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport rehypeRaw from \"rehype-raw\";\n// import { tomorrow } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport \"github-markdown-css\";\n\nimport './index.less'\n\n\nfunction Shapes({ src }) {\n  const [mdText, setMdText] = useState(\"\");\n  useEffect(() => {\n    fetch(src)\n      .then((response) => response.text())\n      .then((text) => {\n        setMdText(text);\n      });\n  }, [src]);\n  return (\n    <div className=\"markdown-body\">\n      <ReactMarkdown\n        children={mdText}\n        rehypePlugins={[rehypeRaw]}\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ node, inline, className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || \"\");\n            return !inline && match ? (\n              <SyntaxHighlighter\n                children={String(children).replace(/\\n$/, \"\")}\n                // style={{ background: 'red'}}\n                language={match[1]}\n                className=\"my-code\"\n                PreTag=\"div\"\n                {...props}\n              />\n            ) : (\n              <code className={className} {...props}>\n                {children}\n              </code>\n            );\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Shapes;\n","export const viewportCoordsToSceneCoords = (\n  { clientX, clientY },\n  { offsetLeft, offsetTop, scrollX, scrollY }\n) => {\n  const x = clientX - offsetLeft - scrollX;\n  const y = clientY - offsetTop - scrollY;\n  return { x, y };\n};\n","import { elements } from \"./index\";\n\nconst renderElements = (ctx, appState) => {\n  elements.forEach((ele) => {\n    ctx.save();\n\n    ctx.beginPath();\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"blue\";\n\n    ele.points.forEach((point, index) => {\n      if (!index) {\n        ctx.moveTo(...ele.points[0]);\n      } else {\n        ctx.lineTo(...point);\n      }\n    });\n\n    ctx.stroke();\n\n    ctx.restore();\n  });\n  // ctx.beginPath(); // 重新绘制新的路径\n  // console.log(\"render\");\n  // ctx.lineWidth = 5;\n  // ctx.strokeStyle = \"blue\";\n  // ctx.moveTo(33, 5);\n  // ctx.lineTo(33, 140);\n  // ctx.stroke();\n\n  // ctx.beginPath(); // 重新绘制新的路径\n  // console.log(\"render\");\n  // ctx.lineWidth = 1;\n  // ctx.strokeStyle = \"blue\";\n  // ctx.moveTo(23, 5);\n  // ctx.lineTo(63, 140);\n  // ctx.stroke();\n};\nconst renderScene = (canvas, appState) => {\n  const context = canvas.getContext(\"2d\");\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  renderElements(context, appState);\n};\n\nexport default renderScene;\n","import React, { memo, useRef, useEffect } from \"react\";\nimport { viewportCoordsToSceneCoords } from \"@/util\";\nimport MarkDown from \"@/components/markdown\";\nimport doc from \"../../../doc/canvas进阶/自由绘制.md\";\nimport \"./index.less\";\nimport renderScene from \"./renderScene\";\n\nexport const elements = [];\nconst appState = {\n  offsetLeft: 0,\n  offsetTop: 0,\n  scrollX: 0,\n  scrollY: 0,\n  draggingElement: null,\n};\nconst Canvas = memo(() => {\n  const canvasRef = useRef(null);\n  const canvasContainer = useRef(null);\n  useEffect(() => {\n    // canvas分辨率矫正\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    const { offsetWidth, offsetHeight, offsetLeft, offsetTop } = canvas;\n    canvas.width = offsetWidth * window.devicePixelRatio;\n    canvas.height = offsetHeight * window.devicePixelRatio;\n    context.scale(window.devicePixelRatio, window.devicePixelRatio);\n    appState.offsetLeft = offsetLeft;\n    appState.offsetTop = offsetTop;\n    renderScene(canvas, appState);\n\n    // 防止双指滑动时切换页面\n    const wrap = canvasContainer.current;\n    const handleWheel = (e) => {\n      e.preventDefault();\n    };\n    // 防止双指滑动时切换页面\n    wrap.addEventListener(\"wheel\", handleWheel, {\n      passive: false,\n    });\n    return () => {\n      wrap.removeEventListener(\"wheel\", handleWheel);\n    };\n  }, []);\n  const handleCanvasPointerDown = (event) => {\n    const origin = viewportCoordsToSceneCoords(event, appState);\n\n    const pointerDownState = {\n      origin,\n      lastCoords: { ...origin },\n      eventListeners: {\n        onMove: null,\n        onUp: null,\n      },\n    };\n    const element = {\n      x: pointerDownState.origin.x,\n      y: pointerDownState.origin.y,\n      points: [],\n      strokeColor: \"#000000\",\n      backgroundColor: \"transparent\",\n      fillStyle: \"hachure\",\n      strokeWidth: 1,\n      strokeStyle: \"solid\",\n    };\n    appState.draggingElement = element;\n    elements.push(element);\n\n    const onPointerMove =\n      onPointerMoveFromCanvasPointerDownHandler(pointerDownState);\n    const onPointerUp =\n      onPointerUpFromCanvasPointerDownHandler(pointerDownState);\n    window.addEventListener(\"pointermove\", onPointerMove);\n    window.addEventListener(\"pointerup\", onPointerUp);\n    pointerDownState.eventListeners.onMove = onPointerMove;\n    pointerDownState.eventListeners.onUp = onPointerUp;\n  };\n  const onPointerMoveFromCanvasPointerDownHandler =\n    (pointerDownState) => (event) => {\n      const pointerCoords = viewportCoordsToSceneCoords(event, appState);\n\n      appState.draggingElement.points.push([pointerCoords.x, pointerCoords.y]);\n      renderScene(canvasRef.current, appState);\n    };\n\n  const onPointerUpFromCanvasPointerDownHandler = (pointerDownState) => () => {\n    window.removeEventListener(\n      \"pointermove\",\n      pointerDownState.eventListeners.onMove\n    );\n    window.removeEventListener(\n      \"pointerup\",\n      pointerDownState.eventListeners.onUp\n    );\n  };\n  return (\n    <div className=\"free-draw\">\n      <div className=\"container\" ref={canvasContainer}>\n        <canvas\n          ref={canvasRef}\n          className=\"canvas\"\n          onPointerDown={handleCanvasPointerDown}\n        >\n          绘制canvas\n        </canvas>\n      </div>\n      <MarkDown src={doc} />\n    </div>\n  );\n});\n\nexport default Canvas;\n"],"names":["src","useState","mdText","setMdText","useEffect","fetch","then","response","text","className","children","rehypePlugins","rehypeRaw","remarkPlugins","remarkGfm","components","code","node","inline","props","match","exec","String","replace","language","PreTag","viewportCoordsToSceneCoords","clientX","clientY","offsetLeft","offsetTop","x","scrollX","y","scrollY","canvas","appState","ctx","context","getContext","clearRect","width","height","elements","ele","save","beginPath","lineWidth","strokeStyle","points","forEach","point","index","lineTo","moveTo","stroke","restore","draggingElement","memo","canvasRef","useRef","canvasContainer","current","offsetWidth","offsetHeight","window","devicePixelRatio","scale","renderScene","wrap","handleWheel","e","preventDefault","addEventListener","passive","removeEventListener","onPointerMoveFromCanvasPointerDownHandler","pointerDownState","event","pointerCoords","push","onPointerUpFromCanvasPointerDownHandler","eventListeners","onMove","onUp","ref","onPointerDown","origin","lastCoords","element","strokeColor","backgroundColor","fillStyle","strokeWidth","onPointerMove","onPointerUp","doc"],"sourceRoot":""}