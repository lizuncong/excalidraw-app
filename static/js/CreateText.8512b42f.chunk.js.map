{"version":3,"file":"static/js/CreateText.8512b42f.chunk.js","mappings":"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","sources":["components/markdown/index.jsx","pages/create-text/element.js","pages/create-text/constant.js","pages/create-text/renderScene.js","pages/create-text/index.jsx","util/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport rehypeRaw from \"rehype-raw\";\n// import { tomorrow } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport \"github-markdown-css\";\n\nimport './index.less'\n\n\nfunction Shapes({ src }) {\n  const [mdText, setMdText] = useState(\"\");\n  useEffect(() => {\n    fetch(src)\n      .then((response) => response.text())\n      .then((text) => {\n        setMdText(text);\n      });\n  }, [src]);\n  return (\n    <div className=\"markdown-body\">\n      <ReactMarkdown\n        children={mdText}\n        rehypePlugins={[rehypeRaw]}\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ node, inline, className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || \"\");\n            return !inline && match ? (\n              <SyntaxHighlighter\n                children={String(children).replace(/\\n$/, \"\")}\n                // style={{ background: 'red'}}\n                language={match[1]}\n                className=\"my-code\"\n                PreTag=\"div\"\n                {...props}\n              />\n            ) : (\n              <code className={className} {...props}>\n                {children}\n              </code>\n            );\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Shapes;\n","import { randomId } from \"@/util\";\nconst _newElementBase = (\n  type,\n  {\n    x,\n    y,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    strokeStyle,\n    roughness,\n    opacity,\n    width = 0,\n    height = 0,\n    angle = 0,\n    ...rest\n  }\n) => {\n  const element = {\n    id: randomId(),\n    type,\n    x,\n    y,\n    width,\n    height,\n    angle,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    strokeStyle,\n    roughness,\n    opacity,\n  };\n  return element;\n};\nexport const normalizeText = (text) => {\n  return text.replace(/\\t/g, \"        \").replace(/\\r?\\n|\\r/g, \"\\n\");\n};\n// export const measureText = (\n//   text,\n//   font,\n//   maxWidth,\n// ) => {\n//   text = text\n//     .split(\"\\n\")\n//     // replace empty lines with single space because leading/trailing empty\n//     // lines would be stripped from computation\n//     .map((x) => x || \" \")\n//     .join(\"\\n\");\n//   const container = document.createElement(\"div\");\n//   container.style.position = \"absolute\";\n//   container.style.whiteSpace = \"pre\";\n//   container.style.font = font;\n//   container.style.minHeight = \"1em\";\n//   if (maxWidth) {\n//     const lineHeight = getApproxLineHeight(font);\n//     container.style.maxWidth = `${String(maxWidth)}px`;\n//     container.style.overflow = \"hidden\";\n//     container.style.wordBreak = \"break-word\";\n//     container.style.lineHeight = `${String(lineHeight)}px`;\n//     container.style.whiteSpace = \"pre-wrap\";\n//   }\n//   document.body.appendChild(container);\n//   container.innerText = text;\n\n//   const span = document.createElement(\"span\");\n//   span.style.display = \"inline-block\";\n//   span.style.overflow = \"hidden\";\n//   span.style.width = \"1px\";\n//   span.style.height = \"1px\";\n//   container.appendChild(span);\n//   // Baseline is important for positioning text on canvas\n//   const baseline = span.offsetTop + span.offsetHeight;\n//   // Since span adds 1px extra width to the container\n//   const width = container.offsetWidth + 1;\n//   const height = container.offsetHeight;\n\n//   document.body.removeChild(container);\n//   return { width, height, baseline };\n// };\nexport const newTextElement = (opts) => {\n  const text = normalizeText(opts.text);\n    // const metrics = measureText(text, getFontString(opts));\n  //   const offsets = getTextElementPositionOffsets(opts, metrics);\n  const textElement = {\n    ..._newElementBase(\"text\", opts),\n    text,\n    fontSize: opts.fontSize,\n    fontFamily: opts.fontFamily,\n    textAlign: opts.textAlign,\n    verticalAlign: opts.verticalAlign,\n    // x: opts.x - offsets.x,\n    // y: opts.y - offsets.y,\n    // width: metrics.width,\n    // height: metrics.height,\n    // baseline: metrics.baseline,\n    containerId: opts.containerId || null,\n    originalText: text,\n  };\n\n  return textElement;\n};\n\nexport const getFontString = ({ fontSize, fontFamily }) => {\n  return `${fontSize}px ${fontFamily}, Segoe UI Emoji`;\n};\n","export const elementKey = 'text-elements'","import { elements } from \"./index\";\nimport { getElementAbsoluteCoords } from \"@/util\";\nimport { getFontString } from \"./element\";\nimport { elementKey } from \"./constant\";\n// let previewCanvas = null;\nconst elementWithCanvasCache = new WeakMap();\n\nexport const deleteElementCache = (element) => {\n  elementWithCanvasCache.delete(element);\n};\nconst generateCanvas = (ele) => {\n  const prevElementWithCanvas = elementWithCanvasCache.get(ele);\n\n  if (prevElementWithCanvas) {\n    return prevElementWithCanvas;\n  }\n  // 离屏canvas绘制\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n\n  // const offscreenContainer = document.getElementById(\"offscreen\");\n\n  // if (previewCanvas) {\n  //   offscreenContainer.removeChild(previewCanvas);\n  // }\n  // previewCanvas = canvas;\n  // offscreenContainer.appendChild(previewCanvas);\n\n  const padding = 20;\n  canvas.width = ele.width * window.devicePixelRatio + padding * 2;\n  canvas.height = ele.height * window.devicePixelRatio + padding * 2;\n  context.save();\n  context.translate(padding, padding);\n  context.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n  // 绘制离屏canvas\n  context.font = getFontString(ele);\n  context.fillStyle = ele.strokeColor;\n  context.textAlign = ele.textAlign;\n  const lines = ele.text.split(\"\\n\");\n  const lineHeight = lines.length ? (ele.height / lines.length) : 18;\n  context.textBaseline = \"bottom\";\n  for (let index = 0; index < lines.length; index++) {\n    context.fillText(lines[index], 0, (index + 1) * lineHeight);\n  }\n\n  context.restore();\n\n  elementWithCanvasCache.set(ele, canvas);\n  return canvas;\n};\nconst renderElements = (ctx, appState) => {\n  elements.forEach((ele) => {\n    // 离屏canvas绘制\n    const canvas = generateCanvas(ele);\n    let [x1, y1, x2, y2] = getElementAbsoluteCoords(ele);\n\n    const padding = 20;\n\n    // 真正绘制\n    const cx = ((x1 + x2) / 2 + appState.scrollX) * window.devicePixelRatio;\n    const cy = ((y1 + y2) / 2 + appState.scrollY) * window.devicePixelRatio;\n\n    ctx.save();\n    ctx.scale(1 / window.devicePixelRatio, 1 / window.devicePixelRatio);\n    ctx.translate(cx, cy);\n    ctx.drawImage(\n      canvas,\n      (-(x2 - x1) / 2) * window.devicePixelRatio - padding,\n      (-(y2 - y1) / 2) * window.devicePixelRatio - padding,\n      canvas.width,\n      canvas.height\n    );\n\n    ctx.restore();\n  });\n};\nconst renderScene = (canvas, appState) => {\n  const context = canvas.getContext(\"2d\");\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  renderElements(context, appState);\n  localStorage.setItem(elementKey, JSON.stringify(elements));\n};\n\nexport default renderScene;\n","import React, { memo, useRef, useState, useEffect } from \"react\";\nimport { viewportCoordsToSceneCoords, rgb } from \"@/util\";\nimport MarkDown from \"@/components/markdown\";\nimport doc from \"@doc/canvas进阶/点稀释.md\";\nimport \"./index.less\";\nimport renderScene, { deleteElementCache } from \"./renderScene\";\nimport { elementKey } from \"./constant\";\nimport { newTextElement, getFontString } from \"./element\";\nexport let elements = JSON.parse(localStorage.getItem(elementKey)) || [];\nconst appState = {\n  offsetLeft: 0,\n  offsetTop: 0,\n  scrollX: 0,\n  scrollY: 0,\n  canvasWidth: 0,\n  canvasHeight: 0,\n  draggingElement: null,\n};\nconst Canvas = memo(() => {\n  const canvasRef = useRef(null);\n  const canvasContainer = useRef(null);\n  const staticCanvasRef = useRef(null);\n  const textareaRef = useRef(null);\n  const [textareaValue, setTextAreaValue] = useState(\"\");\n  useEffect(() => {\n    const setCanvasSize = (canvas) => {\n      const context = canvas.getContext(\"2d\");\n\n      canvas.width = offsetWidth * window.devicePixelRatio;\n      canvas.height = offsetHeight * window.devicePixelRatio;\n      context.scale(window.devicePixelRatio, window.devicePixelRatio);\n    };\n    // canvas分辨率矫正\n    const canvas = canvasRef.current;\n    const { offsetWidth, offsetHeight } = canvas;\n    setCanvasSize(canvas);\n    setCanvasSize(staticCanvasRef.current);\n    // 设置appState\n    const { x, y } = canvas.getBoundingClientRect();\n    // const offsetTop = Math.ceil(y);\n    // const offsetLeft = Math.ceil(x);\n\n    appState.offsetLeft = x; //offsetLeft;\n    appState.offsetTop = y; //offsetTop;\n    appState.canvasWidth = offsetWidth;\n    appState.canvasHeight = offsetHeight;\n    // 绘制静态canvas\n    renderScene(staticCanvasRef.current, appState);\n\n    // 防止双指滑动时切换页面\n    const wrap = canvasContainer.current;\n    const handleWheel = (e) => {\n      e.preventDefault();\n    };\n    // 防止双指滑动时切换页面\n    wrap.addEventListener(\"wheel\", handleWheel, {\n      passive: false,\n    });\n    return () => {\n      wrap.removeEventListener(\"wheel\", handleWheel);\n    };\n  }, []);\n\n  const handleCanvasDoubleClick = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    let { x: sceneX, y: sceneY } = viewportCoordsToSceneCoords(event, appState);\n    const element = newTextElement({\n      x: sceneX,\n      y: sceneY,\n      strokeColor: rgb(),\n      backgroundColor: \"transparent\",\n      fillStyle: \"hachure\",\n      strokeWidth: 1,\n      strokeStyle: \"solid\",\n      text: \"\",\n      fontSize: 20,\n      fontFamily: \"Virgil\", // Helvetica Cascadia\n      textAlign: \"left\",\n      verticalAlign: \"top\",\n    });\n    appState.draggingElement = element;\n    const textarea = textareaRef.current;\n    textarea.focus();\n    const styleObj = {\n      font: getFontString(element),\n      left: `${sceneX}px`,\n      top: `${sceneY}px`,\n      opacity: 1,\n      color: element.strokeColor,\n      fontSize: element.fontSize,\n    };\n    Object.assign(textarea.style, styleObj);\n    const copyTextarea = document.getElementById(\"copyText\");\n    Object.assign(copyTextarea.style, styleObj);\n    // 输入框限制最大宽度，防止输入的文字超出画布宽度\n    const maxWidth = appState.canvasWidth - sceneX;\n    textarea.style.maxWidth = `${maxWidth}px`;\n    textarea.style.width = `${element.fontSize}px`;\n    textarea.style.height = `${element.fontSize * 1.2}px`;\n  };\n  return (\n    <div className=\"create-text\">\n      <div className=\"container wrap\" ref={canvasContainer}>\n        <canvas ref={staticCanvasRef} className=\"canvas\">\n          静态canvas\n        </canvas>\n        <canvas\n          ref={canvasRef}\n          className=\"canvas draw\"\n          onDoubleClick={handleCanvasDoubleClick}\n        >\n          动态canvas\n        </canvas>\n        <textarea\n          onChange={(e) => {\n            let text = e.target.value;\n            const textarea = textareaRef.current;\n            const maxWidth = parseFloat(textarea.style.maxWidth);\n\n            const copyTextarea = document.getElementById(\"copyText\");\n            copyTextarea.innerText = text;\n            const copyTextWidth = copyTextarea.getBoundingClientRect().width;\n            if (copyTextWidth > maxWidth) {\n              // 正常输入的情况下，两者的差值不会太大，只有粘贴进来的文本才会导致\n              // copy text宽度突然增大\n              if (copyTextWidth - maxWidth < 30) {\n                text = copyTextarea.innerText =\n                  text.slice(0, text.length - 1) +\n                  \"\\n\" +\n                  text.slice(text.length - 1);\n              } else {\n                let lines = text.split(\"\\n\");\n                const splitResult = [];\n                lines.forEach((line) => {\n                  copyTextarea.innerText = line;\n                  const copyTextWidth =\n                    copyTextarea.getBoundingClientRect().width;\n                  if (copyTextWidth <= maxWidth) {\n                    splitResult.push(line);\n                  } else {\n                    let lastIdx = 0;\n                    for (let i = 1; i < line.length; i++) {\n                      const str = line.slice(lastIdx, i);\n                      copyTextarea.innerText = str;\n                      const copyTextWidth =\n                        copyTextarea.getBoundingClientRect().width;\n                      if (copyTextWidth > maxWidth) {\n                        splitResult.push(line.slice(lastIdx, i - 1));\n                        lastIdx = i - 1;\n                      } else if (i === line.length - 1) {\n                        splitResult.push(line.slice(lastIdx, i));\n                      }\n                    }\n                  }\n                });\n                text = splitResult.join(\"\\n\");\n                copyTextarea.innerText = text;\n              }\n            }\n\n            setTextAreaValue(text);\n            const { width, height } = copyTextarea.getBoundingClientRect();\n            textarea.style.width = `${width + 30}px`;\n            textarea.style.height = `${height}px`;\n\n            appState.draggingElement.text = text;\n          }}\n          onBlur={() => {\n            const element = appState.draggingElement;\n            const textarea = textareaRef.current;\n            const copyTextarea = document.getElementById(\"copyText\");\n            if (element.text) {\n              element.width = copyTextarea.offsetWidth;\n              element.height = copyTextarea.offsetHeight;\n              deleteElementCache(appState.draggingElement);\n              elements.push(appState.draggingElement);\n              renderScene(staticCanvasRef.current, appState);\n              setTimeout(() => {\n                copyTextarea.innerText = \"\";\n                setTextAreaValue(\"\");\n              }, 200);\n            }\n            Object.assign(textarea.style, {\n              left: `0px`,\n              top: `0px`,\n              width: \"20px\",\n              height: `30px`,\n              opacity: 0,\n            });\n          }}\n          value={textareaValue}\n          className=\"textarea\"\n          ref={textareaRef}\n        ></textarea>\n      </div>\n      <div id=\"offscreen\"></div>\n      <MarkDown src={doc} />\n      <div\n        style={{ background: \"grey\" }}\n        id=\"copyText\"\n        contentEditable={true}\n        className=\"textarea textarea_copy\"\n      ></div>\n    </div>\n  );\n});\n\nexport default Canvas;\n","import { unstable_batchedUpdates } from \"react-dom\";\n\nexport const sceneCoordsToViewportCoords = (\n  { sceneX, sceneY },\n  { offsetLeft, offsetTop, scrollX, scrollY }\n) => {\n  const x = sceneX + scrollX + offsetLeft;\n  const y = sceneY + scrollY + offsetTop;\n  return { x, y };\n};\nexport const viewportCoordsToSceneCoords = (\n  { clientX, clientY },\n  { zoom, offsetLeft, offsetTop, scrollX, scrollY }\n) => {\n  const zoomValue = zoom ? zoom.value : 1;\n  const x = (clientX - offsetLeft) / zoomValue - scrollX;\n  const y = (clientY - offsetTop) / zoomValue - scrollY;\n  return { x, y };\n};\n\n//rgb颜色随机\nexport const rgb = () => {\n  const r = Math.floor(Math.random() * 256);\n  const g = Math.floor(Math.random() * 256);\n  const b = Math.floor(Math.random() * 256);\n  return `rgb(${r},${g},${b})`;\n};\n\nexport const throttleRAF = (fn, opts) => {\n  let timerId = null;\n  let lastArgs = null;\n  let lastArgsTrailing = null;\n\n  const scheduleFunc = (args) => {\n    timerId = window.requestAnimationFrame(() => {\n      timerId = null;\n      fn(...args);\n      lastArgs = null;\n      if (lastArgsTrailing) {\n        lastArgs = lastArgsTrailing;\n        lastArgsTrailing = null;\n        scheduleFunc(lastArgs);\n      }\n    });\n  };\n\n  const ret = (...args) => {\n    if (process.env.NODE_ENV === \"test\") {\n      fn(...args);\n      return;\n    }\n    lastArgs = args;\n    if (timerId === null) {\n      scheduleFunc(lastArgs);\n    } else if (opts?.trailing) {\n      lastArgsTrailing = args;\n    }\n  };\n  ret.flush = () => {\n    if (timerId !== null) {\n      cancelAnimationFrame(timerId);\n      timerId = null;\n    }\n    if (lastArgs) {\n      fn(...(lastArgsTrailing || lastArgs));\n      lastArgs = lastArgsTrailing = null;\n    }\n  };\n  ret.cancel = () => {\n    lastArgs = lastArgsTrailing = null;\n    if (timerId !== null) {\n      cancelAnimationFrame(timerId);\n      timerId = null;\n    }\n  };\n  return ret;\n};\nexport const withBatchedUpdatesThrottled = (func) => {\n  return throttleRAF((event) => {\n    unstable_batchedUpdates(func, event);\n  });\n};\n\nexport const getBoundsFromPoints = (element) => {\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let points = element.points;\n  if (element.type === \"freedraw\") {\n    points = element.points.map((p) => {\n      return [p[0] - element.x, p[1] - element.y];\n    });\n  }\n  for (const [x, y] of points) {\n    minX = Math.min(minX, x);\n    minY = Math.min(minY, y);\n    maxX = Math.max(maxX, x);\n    maxY = Math.max(maxY, y);\n  }\n\n  return [minX, minY, maxX, maxY];\n};\n\nexport const rotate = (x1, y1, x2, y2, angle) =>\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2,\n  ];\n\nexport const getElementBounds = (element) => {\n  let bounds;\n\n  const [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(element);\n\n  if (element.type === \"freedraw\") {\n    const [minX, minY, maxX, maxY] = getBoundsFromPoints(element);\n\n    return [\n      minX + element.x,\n      minY + element.y,\n      maxX + element.x,\n      maxY + element.y,\n    ];\n  } else {\n    const [x11, y11] = rotate(x1, y1, cx, cy, element.angle);\n    const [x12, y12] = rotate(x1, y2, cx, cy, element.angle);\n    const [x22, y22] = rotate(x2, y2, cx, cy, element.angle);\n    const [x21, y21] = rotate(x2, y1, cx, cy, element.angle);\n    const minX = Math.min(x11, x12, x22, x21);\n    const minY = Math.min(y11, y12, y22, y21);\n    const maxX = Math.max(x11, x12, x22, x21);\n    const maxY = Math.max(y11, y12, y22, y21);\n    bounds = [minX, minY, maxX, maxY];\n  }\n\n  return bounds;\n};\nexport const getCommonBounds = (elements) => {\n  if (!elements.length) {\n    return [0, 0, 0, 0];\n  }\n\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n\n  elements.forEach((element) => {\n    const [x1, y1, x2, y2] = getElementBounds(element);\n    minX = Math.min(minX, x1);\n    minY = Math.min(minY, y1);\n    maxX = Math.max(maxX, x2);\n    maxY = Math.max(maxY, y2);\n  });\n\n  return [minX, minY, maxX, maxY];\n};\nexport const getElementAbsoluteCoords = (element) => {\n  if (element.type === \"freedraw\") {\n    const [minX, minY, maxX, maxY] = getBoundsFromPoints(element);\n    const x1 = minX + element.x;\n    const y1 = minY + element.y;\n    const x2 = maxX + element.x;\n    const y2 = maxY + element.y;\n    return [x1, y1, x2, y2, (x1 + x2) / 2, (y1 + y2) / 2];\n  }\n  return [\n    element.x,\n    element.y,\n    element.x + element.width,\n    element.y + element.height,\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  ];\n};\n\nexport const distance = (x, y) => Math.abs(x - y);\n\nexport const getSizeFromPoints = (points) => {\n  const xs = points.map((point) => point[0]);\n  const ys = points.map((point) => point[1]);\n  return {\n    width: Math.max(...xs) - Math.min(...xs),\n    height: Math.max(...ys) - Math.min(...ys),\n  };\n};\n\nlet testIdBase = 0;\nexport const randomId = () => `id${testIdBase++}`;\nexport const randomInteger = () => Math.floor(Math.random() * 2 ** 31);\n\nexport const generateExcalidrawElements = () => {\n  const freeDrawElements =\n    JSON.parse(localStorage.getItem(\"free-draw-elements\")) || [];\n  const result = freeDrawElements.map((ele) => {\n    const points = ele.points.map((p) => {\n      return [p[0] - ele.x, p[1] - ele.y];\n    });\n    const { width, height } = getSizeFromPoints(points);\n    return {\n      id: randomId(),\n      type: \"freedraw\",\n      x: ele.x,\n      y: ele.y,\n      width: width,\n      height: height,\n      angle: 0,\n      strokeColor: ele.strokeStyle,\n      backgroundColor: \"transparent\",\n      fillStyle: \"hachure\",\n      strokeWidth: 1,\n      strokeStyle: \"solid\",\n      roughness: 1,\n      opacity: 100,\n      groupIds: [],\n      roundness: null,\n      seed: randomInteger(),\n      version: 1,\n      versionNonce: 0,\n      isDeleted: false,\n      boundElements: null,\n      updated: Date.now(),\n      link: null,\n      locked: false,\n      points: points,\n      pressures: [],\n      simulatePressure: true,\n      lastCommittedPoint: points[points.length - 1],\n    };\n  });\n  return result;\n};\n\n// for worker\n// window.__generateExcalidrawElements = generateExcalidrawElements;\n\nexport const getFontString = ({ fontSize, fontFamily }) => {\n  return `${fontSize}px ${fontFamily}, Segoe UI Emoji`;\n};\n"],"names":["src","useState","mdText","setMdText","useEffect","fetch","then","response","text","className","children","rehypePlugins","rehypeRaw","remarkPlugins","remarkGfm","components","code","node","inline","props","match","exec","String","replace","language","PreTag","newTextElement","opts","normalizeText","type","x","y","strokeColor","backgroundColor","fillStyle","strokeWidth","strokeStyle","roughness","opacity","width","height","angle","id","randomId","_newElementBase","fontSize","fontFamily","textAlign","verticalAlign","containerId","originalText","getFontString","elementKey","elementWithCanvasCache","WeakMap","renderElements","ctx","appState","elements","ele","canvas","prevElementWithCanvas","get","document","createElement","context","getContext","window","devicePixelRatio","padding","save","translate","scale","font","lines","split","lineHeight","length","textBaseline","index","fillText","restore","set","generateCanvas","getElementAbsoluteCoords","x1","y1","x2","y2","cx","scrollX","cy","scrollY","drawImage","clearRect","localStorage","setItem","JSON","stringify","parse","getItem","offsetLeft","offsetTop","canvasWidth","canvasHeight","draggingElement","memo","canvasRef","useRef","canvasContainer","staticCanvasRef","textareaRef","textareaValue","setTextAreaValue","setCanvasSize","offsetWidth","offsetHeight","current","getBoundingClientRect","renderScene","wrap","handleWheel","e","preventDefault","addEventListener","passive","removeEventListener","ref","onDoubleClick","event","stopPropagation","viewportCoordsToSceneCoords","sceneX","sceneY","element","rgb","textarea","focus","styleObj","left","top","color","Object","assign","style","copyTextarea","getElementById","maxWidth","onChange","target","value","parseFloat","innerText","copyTextWidth","slice","splitResult","forEach","line","push","lastIdx","i","str","join","onBlur","delete","deleteElementCache","setTimeout","doc","background","contentEditable","clientX","clientY","zoom","zoomValue","r","Math","floor","random","g","b","withBatchedUpdatesThrottled","func","fn","timerId","lastArgs","lastArgsTrailing","scheduleFunc","args","requestAnimationFrame","ret","trailing","flush","cancelAnimationFrame","cancel","throttleRAF","unstable_batchedUpdates","getBoundsFromPoints","minX","Infinity","minY","maxX","maxY","points","map","p","min","max","rotate","cos","sin","getElementBounds","x11","y11","x12","y12","x22","y22","x21","y21","getCommonBounds","distance","abs","testIdBase"],"sourceRoot":""}