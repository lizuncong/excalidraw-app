{"version":3,"file":"static/js/MultipleCanvas.06a28f82.chunk.js","mappings":"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","sources":["components/markdown/index.jsx","pages/free-draw/multiple-layered/util.js","pages/free-draw/multiple-layered/renderScene.js","pages/free-draw/multiple-layered/index.jsx","util/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport rehypeRaw from \"rehype-raw\";\n// import { tomorrow } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport \"github-markdown-css\";\n\nimport './index.less'\n\n\nfunction Shapes({ src }) {\n  const [mdText, setMdText] = useState(\"\");\n  useEffect(() => {\n    fetch(src)\n      .then((response) => response.text())\n      .then((text) => {\n        setMdText(text);\n      });\n  }, [src]);\n  return (\n    <div className=\"markdown-body\">\n      <ReactMarkdown\n        children={mdText}\n        rehypePlugins={[rehypeRaw]}\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ node, inline, className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || \"\");\n            return !inline && match ? (\n              <SyntaxHighlighter\n                children={String(children).replace(/\\n$/, \"\")}\n                // style={{ background: 'red'}}\n                language={match[1]}\n                className=\"my-code\"\n                PreTag=\"div\"\n                {...props}\n              />\n            ) : (\n              <code className={className} {...props}>\n                {children}\n              </code>\n            );\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Shapes;\n","import { unstable_batchedUpdates } from \"react-dom\";\nexport const throttleRAF = (fn, opts) => {\n  let timerId = null;\n  let lastArgs = null;\n  let lastArgsTrailing = null;\n\n  const scheduleFunc = (args) => {\n    timerId = window.requestAnimationFrame(() => {\n      timerId = null;\n      fn(...args);\n      lastArgs = null;\n      if (lastArgsTrailing) {\n        lastArgs = lastArgsTrailing;\n        lastArgsTrailing = null;\n        scheduleFunc(lastArgs);\n      }\n    });\n  };\n\n  const ret = (...args) => {\n    if (process.env.NODE_ENV === \"test\") {\n      fn(...args);\n      return;\n    }\n    lastArgs = args;\n    if (timerId === null) {\n      scheduleFunc(lastArgs);\n    } else if (opts?.trailing) {\n      lastArgsTrailing = args;\n    }\n  };\n  ret.flush = () => {\n    if (timerId !== null) {\n      cancelAnimationFrame(timerId);\n      timerId = null;\n    }\n    if (lastArgs) {\n      fn(...(lastArgsTrailing || lastArgs));\n      lastArgs = lastArgsTrailing = null;\n    }\n  };\n  ret.cancel = () => {\n    lastArgs = lastArgsTrailing = null;\n    if (timerId !== null) {\n      cancelAnimationFrame(timerId);\n      timerId = null;\n    }\n  };\n  return ret;\n};\nexport const withBatchedUpdatesThrottled = (func) => {\n  return throttleRAF((event) => {\n    unstable_batchedUpdates(func, event);\n  });\n};\n\nexport const getBoundsFromPoints = (points) => {\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  for (const [x, y] of points) {\n    minX = Math.min(minX, x);\n    minY = Math.min(minY, y);\n    maxX = Math.max(maxX, x);\n    maxY = Math.max(maxY, y);\n  }\n\n  return [minX, minY, maxX, maxY];\n};\n\nexport const getElementAbsoluteCoords = (element) => {\n  const [minX, minY, maxX, maxY] = getBoundsFromPoints(element.points);\n  const x1 = minX + element.x;\n  const y1 = minY + element.y;\n  const x2 = maxX + element.x;\n  const y2 = maxY + element.y;\n  return [x1, y1, x2, y2, (x1 + x2) / 2, (y1 + y2) / 2];\n};\n\nexport const distance = (x, y) => Math.abs(x - y);\n\nexport const getSizeFromPoints = (points) => {\n  const xs = points.map((point) => point[0]);\n  const ys = points.map((point) => point[1]);\n  return {\n    width: Math.max(...xs) - Math.min(...xs),\n    height: Math.max(...ys) - Math.min(...ys),\n  };\n};\n\nlet testIdBase = 0;\nexport const randomId = () => `id${testIdBase++}`;\nexport const randomInteger = () => Math.floor(Math.random() * 2 ** 31);\n\nexport const generateExcalidrawElements = () => {\n  const freeDrawElements =\n    JSON.parse(localStorage.getItem(\"free-draw-elements\")) || [];\n  const result = freeDrawElements.map((ele) => {\n    const points = ele.points.map((p) => {\n      return [p[0] - ele.x, p[1] - ele.y];\n    });\n    const {width, height} = getSizeFromPoints(points);\n    return {\n      id: randomId(),\n      type: \"freedraw\",\n      x: ele.x,\n      y: ele.y,\n      width: width,\n      height: height,\n      angle: 0,\n      strokeColor: ele.strokeStyle,\n      backgroundColor: \"transparent\",\n      fillStyle: \"hachure\",\n      strokeWidth: 1,\n      strokeStyle: \"solid\",\n      roughness: 1,\n      opacity: 100,\n      groupIds: [],\n      roundness: null,\n      seed: randomInteger(),\n      version: 1,\n      versionNonce: 0,\n      isDeleted: false,\n      boundElements: null,\n      updated: Date.now(),\n      link: null,\n      locked: false,\n      points: points,\n      pressures: [],\n      simulatePressure: true,\n      lastCommittedPoint: points[points.length -1 ],\n    };\n  });\n  return result\n};\n\nwindow.__generateExcalidrawElements = generateExcalidrawElements;","import { elements } from \"./index\";\nimport { getElementAbsoluteCoords, distance } from \"./util\";\n// let previewCanvas = null;\nconst elementWithCanvasCache = new WeakMap();\n\nexport const deleteElementCache = (element) => {\n  elementWithCanvasCache.delete(element);\n};\nconst generateCanvas = (ele) => {\n  const prevElementWithCanvas = elementWithCanvasCache.get(ele);\n\n  if (prevElementWithCanvas) {\n    return prevElementWithCanvas;\n  }\n  // 离屏canvas绘制\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n\n  // const offscreenContainer = document.getElementById(\"offscreen\");\n\n  // if (previewCanvas) {\n  //   offscreenContainer.removeChild(previewCanvas);\n  // }\n  // previewCanvas = canvas;\n  // offscreenContainer.appendChild(previewCanvas);\n\n  let [x1, y1, x2, y2] = getElementAbsoluteCoords({\n    ...ele,\n    points: ele.points.map((p) => {\n      return [p[0] - ele.x, p[1] - ele.y];\n    }),\n  });\n  let canvasOffsetX = 0;\n  let canvasOffsetY = 0;\n  const padding = 20;\n  canvas.width = distance(x1, x2) * window.devicePixelRatio + padding * 2;\n  canvas.height = distance(y1, y2) * window.devicePixelRatio + padding * 2;\n  canvasOffsetX =\n    ele.x > x1 ? distance(ele.x, x1) * window.devicePixelRatio : 0;\n\n  canvasOffsetY =\n    ele.y > y1 ? distance(ele.y, y1) * window.devicePixelRatio : 0;\n\n  context.translate(canvasOffsetX, canvasOffsetY);\n  context.save();\n  context.translate(padding, padding);\n  context.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n  context.lineWidth = 3;\n  context.strokeStyle = ele.strokeStyle;\n  ele.points.forEach((point, index) => {\n    let [x, y] = point;\n    x = x - ele.x;\n    y = y - ele.y;\n    if (!index) {\n      context.moveTo(x, y);\n    } else {\n      context.lineTo(x, y);\n    }\n  });\n\n  context.stroke();\n\n  context.restore();\n\n  elementWithCanvasCache.set(ele, canvas);\n  return canvas;\n};\nconst renderElements = (ctx, appState) => {\n  elements.forEach((ele) => {\n    // 离屏canvas绘制\n    const canvas = generateCanvas(ele);\n    let [x1, y1, x2, y2] = getElementAbsoluteCoords({\n      ...ele,\n      points: ele.points.map((p) => {\n        return [p[0] - ele.x, p[1] - ele.y];\n      }),\n    });\n\n    const padding = 20;\n\n    // 真正绘制\n    x1 = Math.floor(x1);\n    x2 = Math.ceil(x2);\n    y1 = Math.floor(y1);\n    y2 = Math.ceil(y2);\n    const cx = ((x1 + x2) / 2 + appState.scrollX) * window.devicePixelRatio;\n    const cy = ((y1 + y2) / 2 + appState.scrollY) * window.devicePixelRatio;\n\n    ctx.save();\n    ctx.scale(1 / window.devicePixelRatio, 1 / window.devicePixelRatio);\n    ctx.translate(cx, cy);\n\n    ctx.drawImage(\n      canvas,\n      (-(x2 - x1) / 2) * window.devicePixelRatio - padding,\n      (-(y2 - y1) / 2) * window.devicePixelRatio - padding,\n      canvas.width,\n      canvas.height\n    );\n\n    ctx.restore();\n  });\n};\nconst renderScene = (canvas, appState) => {\n  const context = canvas.getContext(\"2d\");\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  renderElements(context, appState);\n  localStorage.setItem(\"free-draw-elements\", JSON.stringify(elements));\n};\n\nconst renderDraggingElement = (ctx, appState) => {\n  const element = appState.draggingElement\n  ctx.save();\n  ctx.beginPath();\n  ctx.lineWidth = 3;\n  ctx.strokeStyle = element.strokeStyle;\n\n  element.points.forEach((point, index) => {\n    if (!index) {\n      ctx.moveTo(...element.points[0]);\n    } else {\n      ctx.lineTo(...point);\n    }\n  });\n\n  ctx.stroke();\n\n  ctx.restore();\n};\nexport const renderDraggingScene = (canvas, appState) => {\n  const context = canvas.getContext(\"2d\");\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  renderDraggingElement(context, appState);\n};\n\nexport default renderScene;\n","import React, { memo, useRef, useEffect } from \"react\";\nimport { viewportCoordsToSceneCoords, rgb } from \"@/util\";\nimport MarkDown from \"@/components/markdown\";\nimport doc from \"@doc/canvas进阶/点稀释.md\";\nimport \"./index.less\";\nimport renderScene, {\n  deleteElementCache,\n  renderDraggingScene,\n} from \"./renderScene\";\nimport { withBatchedUpdatesThrottled } from \"./util\";\nexport const elements =\n  JSON.parse(localStorage.getItem(\"free-draw-elements\")) || [];\nconst appState = {\n  offsetLeft: 0,\n  offsetTop: 0,\n  scrollX: 0,\n  scrollY: 0,\n  draggingElement: null,\n};\nconst Canvas = memo(() => {\n  const canvasRef = useRef(null);\n  const canvasContainer = useRef(null);\n  const staticCanvasRef = useRef(null);\n  useEffect(() => {\n    const setCanvasSize = (canvas) => {\n      const context = canvas.getContext(\"2d\");\n\n      canvas.width = offsetWidth * window.devicePixelRatio;\n      canvas.height = offsetHeight * window.devicePixelRatio;\n      context.scale(window.devicePixelRatio, window.devicePixelRatio);\n    };\n    // canvas分辨率矫正\n    const canvas = canvasRef.current;\n    const { offsetWidth, offsetHeight } = canvas;\n    setCanvasSize(canvas);\n    setCanvasSize(staticCanvasRef.current);\n    // 设置appState\n    const { x, y } = canvas.getBoundingClientRect();\n    const offsetTop = Math.ceil(y);\n    const offsetLeft = Math.ceil(x);\n\n    appState.offsetLeft = offsetLeft;\n    appState.offsetTop = offsetTop;\n    // 绘制静态canvas\n    renderScene(staticCanvasRef.current, appState);\n\n    // 防止双指滑动时切换页面\n    const wrap = canvasContainer.current;\n    const handleWheel = (e) => {\n      e.preventDefault();\n    };\n    // 防止双指滑动时切换页面\n    wrap.addEventListener(\"wheel\", handleWheel, {\n      passive: false,\n    });\n    return () => {\n      wrap.removeEventListener(\"wheel\", handleWheel);\n    };\n  }, []);\n  const handleCanvasPointerDown = (event) => {\n    const origin = viewportCoordsToSceneCoords(event, appState);\n\n    const pointerDownState = {\n      origin,\n      lastCoords: { ...origin },\n      eventListeners: {\n        onMove: null,\n        onUp: null,\n      },\n    };\n    const element = {\n      x: pointerDownState.origin.x,\n      y: pointerDownState.origin.y,\n      points: [[pointerDownState.origin.x, pointerDownState.origin.y]],\n      strokeColor: \"#000000\",\n      backgroundColor: \"transparent\",\n      fillStyle: \"hachure\",\n      strokeWidth: 1,\n      strokeStyle: rgb(),\n    };\n    appState.draggingElement = element;\n    deleteElementCache(element);\n    // elements.push(element);\n\n    const onPointerMove =\n      onPointerMoveFromCanvasPointerDownHandler(pointerDownState);\n    const onPointerUp =\n      onPointerUpFromCanvasPointerDownHandler(pointerDownState);\n    window.addEventListener(\"pointermove\", onPointerMove);\n    window.addEventListener(\"pointerup\", onPointerUp);\n    pointerDownState.eventListeners.onMove = onPointerMove;\n    pointerDownState.eventListeners.onUp = onPointerUp;\n  };\n  const onPointerMoveFromCanvasPointerDownHandler = (pointerDownState) =>\n    withBatchedUpdatesThrottled((event) => {\n      const pointerCoords = viewportCoordsToSceneCoords(event, appState);\n      appState.draggingElement.points.push([pointerCoords.x, pointerCoords.y]);\n\n      renderDraggingScene(canvasRef.current, appState);\n    });\n\n  const onPointerUpFromCanvasPointerDownHandler = (pointerDownState) => () => {\n    console.log(\"appState...\", appState);\n    console.log(\n      \"elements...\",\n      elements.map((ele) => ele.points.length)\n    );\n    deleteElementCache(appState.draggingElement);\n    elements.push(appState.draggingElement);\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    renderScene(staticCanvasRef.current, appState);\n    window.removeEventListener(\n      \"pointermove\",\n      pointerDownState.eventListeners.onMove\n    );\n    window.removeEventListener(\n      \"pointerup\",\n      pointerDownState.eventListeners.onUp\n    );\n  };\n  return (\n    <div className=\"free-draw\">\n      <div className=\"container\" ref={canvasContainer}>\n        <canvas ref={staticCanvasRef} className=\"canvas\">\n          静态canvas\n        </canvas>\n        <canvas\n          ref={canvasRef}\n          className=\"canvas\"\n          onPointerDown={handleCanvasPointerDown}\n        >\n          动态canvas\n        </canvas>\n      </div>\n      {/* <div id=\"offscreen\"></div> */}\n      <MarkDown src={doc} />\n    </div>\n  );\n});\n\nexport default Canvas;\n","export const viewportCoordsToSceneCoords = (\n  { clientX, clientY },\n  { offsetLeft, offsetTop, scrollX, scrollY }\n) => {\n  const x = clientX - offsetLeft - scrollX;\n  const y = clientY - offsetTop - scrollY;\n  return { x, y };\n};\n\n//rgb颜色随机\nexport const rgb = () => {\n  const r = Math.floor(Math.random() * 256);\n  const g = Math.floor(Math.random() * 256);\n  const b = Math.floor(Math.random() * 256);\n  return `rgb(${r},${g},${b})`;\n};\n"],"names":["src","useState","mdText","setMdText","useEffect","fetch","then","response","text","className","children","rehypePlugins","rehypeRaw","remarkPlugins","remarkGfm","components","code","node","inline","props","match","exec","String","replace","language","PreTag","withBatchedUpdatesThrottled","func","fn","opts","timerId","lastArgs","lastArgsTrailing","scheduleFunc","args","window","requestAnimationFrame","ret","trailing","flush","cancelAnimationFrame","cancel","throttleRAF","event","unstable_batchedUpdates","getElementAbsoluteCoords","element","points","minX","Infinity","minY","maxX","maxY","x","y","Math","min","max","getBoundsFromPoints","x1","y1","x2","y2","distance","abs","testIdBase","__generateExcalidrawElements","JSON","parse","localStorage","getItem","map","ele","p","xs","point","ys","width","height","getSizeFromPoints","id","type","angle","strokeColor","strokeStyle","backgroundColor","fillStyle","strokeWidth","roughness","opacity","groupIds","roundness","seed","floor","random","version","versionNonce","isDeleted","boundElements","updated","Date","now","link","locked","pressures","simulatePressure","lastCommittedPoint","length","elementWithCanvasCache","WeakMap","deleteElementCache","delete","renderElements","ctx","appState","elements","canvas","prevElementWithCanvas","get","canvasOffsetX","canvasOffsetY","document","createElement","context","getContext","devicePixelRatio","padding","translate","save","scale","lineWidth","forEach","index","lineTo","moveTo","stroke","restore","set","generateCanvas","ceil","cx","scrollX","cy","scrollY","drawImage","renderDraggingScene","clearRect","draggingElement","beginPath","renderDraggingElement","setItem","stringify","offsetLeft","offsetTop","memo","canvasRef","useRef","canvasContainer","staticCanvasRef","setCanvasSize","offsetWidth","offsetHeight","current","getBoundingClientRect","renderScene","wrap","handleWheel","e","preventDefault","addEventListener","passive","removeEventListener","onPointerMoveFromCanvasPointerDownHandler","pointerDownState","pointerCoords","viewportCoordsToSceneCoords","push","onPointerUpFromCanvasPointerDownHandler","console","log","eventListeners","onMove","onUp","ref","onPointerDown","origin","lastCoords","rgb","onPointerMove","onPointerUp","doc","clientX","clientY","r","g","b"],"sourceRoot":""}