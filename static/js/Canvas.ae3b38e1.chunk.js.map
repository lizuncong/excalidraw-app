{"version":3,"file":"static/js/Canvas.ae3b38e1.chunk.js","mappings":"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","sources":["pages/canvas/util.js","pages/canvas/scene/scene.js","pages/canvas/index.jsx","pages/canvas/renderer.js","pages/canvas/element/newElement.js","pages/canvas/element/dragElements.js","pages/canvas/element/mutateElement.js"],"sourcesContent":["export const viewportCoordsToSceneCoords = (\n  { clientX, clientY },\n  { offsetLeft, offsetTop, scrollX, scrollY }\n) => {\n  const x = clientX - offsetLeft - scrollX;\n  const y = clientY - offsetTop - scrollY;\n  return { x, y };\n};\n\nexport const distance = (x, y) => Math.abs(x - y);\nlet testIdBase = 0;\n\nexport const randomId = () => `id${testIdBase++}`;\n","class Scene {\n  constructor() {\n    this.elements = [];\n  }\n  getElementsIncludingDeleted() {\n    return this.elements;\n  }\n  replaceAllElements(nextElements) {\n    this.elements = nextElements;\n  }\n}\n\nexport default Scene;\n","import React, { memo, useRef, useEffect } from \"react\";\nimport { viewportCoordsToSceneCoords, distance } from \"./util\";\nimport { dragNewElement } from \"./element/dragElements\";\nimport { newElement } from \"./element/newElement\";\nimport { renderCanvas } from \"./renderer\";\nimport Scene from \"./scene/scene\";\nimport \"./index.less\";\nconst scene = new Scene();\nlet appState = {\n  scrollX: 0,\n  scrollY: 0,\n  offsetLeft: 0,\n  offsetTop: 0,\n  draggingElement: null,\n  currentItemStrokeColor: \"#000000\",\n  currentItemBackgroundColor: \"transparent\",\n  currentItemFillStyle: \"hachure\",\n  currentItemStrokeWidth: 1,\n  currentItemStrokeStyle: \"solid\",\n  currentItemRoughness: 1,\n  currentItemOpacity: 100,\n};\nconst Canvas = memo(() => {\n  const canvasRef = useRef(null);\n  const canvasContainer = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const { offsetWidth, offsetHeight, offsetLeft, offsetTop } = canvas;\n\n    canvas.width = offsetWidth * window.devicePixelRatio;\n    canvas.height = offsetHeight * window.devicePixelRatio;\n    appState.offsetLeft = offsetLeft;\n    appState.offsetTop = offsetTop;\n    renderCanvas(ctx, appState);\n  }, []);\n  useEffect(() => {\n    const wrap = canvasContainer.current;\n    const handleWheel = (e) => {\n      e.preventDefault();\n    };\n    // 防止双指滑动时切换页面\n    wrap.addEventListener(\"wheel\", handleWheel, {\n      passive: false,\n    });\n    return () => {\n      wrap.removeEventListener(\"wheel\", handleWheel);\n    };\n  }, []);\n  const handleCanvasWheel = (event) => {\n    const { deltaX, deltaY } = event;\n    appState.scrollX = appState.scrollX - deltaX;\n    appState.scrollY = appState.scrollY - deltaY;\n\n    // renderCanvas(canvasRef.current.getContext(\"2d\"), appState);\n\n    console.log(\"wheel\", appState.scrollX, appState.scrollY);\n  };\n\n  const handleCanvasPointerDown = (event) => {\n    const pointerDownState = initialPointerDownState(event);\n    createGenericElementOnPointerDown(\"rectangle\", pointerDownState);\n    const onPointerMove =\n      onPointerMoveFromCanvasPointerDownHandler(pointerDownState);\n    const onPointerUp =\n      onPointerUpFromCanvasPointerDownHandler(pointerDownState);\n    window.addEventListener(\"pointermove\", onPointerMove);\n    window.addEventListener(\"pointerup\", onPointerUp);\n    pointerDownState.eventListeners.onMove = onPointerMove;\n    pointerDownState.eventListeners.onUp = onPointerUp;\n  };\n  const renderScene = () => {\n    console.log(\"elements....\", scene.getElementsIncludingDeleted());\n  };\n  const createGenericElementOnPointerDown = (elementType, pointerDownState) => {\n    const element = newElement({\n      type: elementType,\n      x: pointerDownState.origin.x,\n      y: pointerDownState.origin.y,\n      strokeColor: appState.currentItemStrokeColor,\n      backgroundColor: appState.currentItemBackgroundColor,\n      fillStyle: appState.currentItemFillStyle,\n      strokeWidth: appState.currentItemStrokeWidth,\n      strokeStyle: appState.currentItemStrokeStyle,\n      roughness: appState.currentItemRoughness,\n      opacity: appState.currentItemOpacity,\n      roundness: null,\n      locked: false,\n    });\n    scene.replaceAllElements([...scene.getElementsIncludingDeleted(), element]);\n    appState.draggingElement = element;\n  };\n  const onPointerUpFromCanvasPointerDownHandler =\n    (pointerDownState) => (event) => {\n      window.removeEventListener(\n        \"pointermove\",\n        pointerDownState.eventListeners.onMove\n      );\n      window.removeEventListener(\n        \"pointerup\",\n        pointerDownState.eventListeners.onUp\n      );\n    };\n  const onPointerMoveFromCanvasPointerDownHandler =\n    (pointerDownState) => (event) => {\n      const pointerCoords = viewportCoordsToSceneCoords(event, appState);\n      pointerDownState.lastCoords.x = pointerCoords.x;\n      pointerDownState.lastCoords.y = pointerCoords.y;\n      maybeDragNewGenericElement(pointerDownState, event);\n      renderScene();\n    };\n  const maybeDragNewGenericElement = (pointerDownState, event) => {\n    const pointerCoords = pointerDownState.lastCoords;\n    const draggingElement = appState.draggingElement;\n    dragNewElement(\n      draggingElement,\n      \"rectangle\",\n      pointerDownState.origin.x,\n      pointerDownState.origin.y,\n      pointerCoords.x,\n      pointerCoords.y,\n      distance(pointerDownState.origin.x, pointerCoords.x),\n      distance(pointerDownState.origin.y, pointerCoords.y),\n      false,\n      false,\n      null\n    );\n  };\n  const initialPointerDownState = (event) => {\n    const origin = viewportCoordsToSceneCoords(event, appState);\n    return {\n      origin,\n      lastCoords: { ...origin },\n      eventListeners: {\n        onMove: null,\n        onUp: null,\n        onKeyUp: null,\n        onKeyDown: null,\n      },\n    };\n  };\n\n  return (\n    <div ref={canvasContainer}>\n      <canvas\n        onWheel={handleCanvasWheel}\n        onPointerDown={handleCanvasPointerDown}\n        // onPointerUp={(e) => {\n        //   window.removeEventListener(\"pointermove\", handleWindowPointerMove);\n        // }}\n        ref={canvasRef}\n        className=\"canvas\"\n      >\n        绘制canvas\n      </canvas>\n    </div>\n  );\n});\n\nexport default Canvas;\n","export const drawSelection = (context, { scrollX, scrollY }) => {\n  context.save();\n  context.translate(20 + scrollX, 20 + scrollY);\n  context.fillStyle = \"rgba(0, 0, 200, 0.04)\";\n\n  context.fillRect(0, 0, 200, 200);\n  context.lineWidth = 1;\n  context.strokeStyle = \"rgb(105, 101, 219)\";\n  context.strokeRect(0, 0, 200, 200);\n\n  context.restore();\n};\n\nexport const drawAxis = (ctx, { scrollX, scrollY }) => {\n  ctx.save();\n\n  const rectH = 100; // 纵轴刻度间距\n  const rectW = 100; // 横轴刻度间距\n  const tickLength = 8; // 刻度线长度\n  const canvas = ctx.canvas;\n  ctx.translate(scrollX, scrollY);\n  ctx.strokeStyle = 'red'\n  ctx.fillStyle = 'red'\n  // 绘制横轴和纵轴\n  ctx.save();\n  ctx.beginPath();\n  ctx.setLineDash([10, 10]);\n  ctx.moveTo(0, -scrollY);\n  ctx.lineTo(0, canvas.height - scrollY);\n  ctx.moveTo(-scrollX, 0);\n  ctx.lineTo(canvas.width - scrollX, 0);\n  ctx.stroke();\n  ctx.restore();\n  // 绘制横轴和纵轴刻度\n  ctx.beginPath();\n  ctx.lineWidth = 2;\n  ctx.textBaseline = \"middle\";\n  for (let i = 0; i < scrollY / rectH; i++) {\n    // 绘制纵轴刻度\n    ctx.moveTo(0, -i * rectH);\n    ctx.lineTo(tickLength, -i * rectH);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(-i, -25, -i * rectH);\n  }\n  for (let i = 0; i < (canvas.height - scrollY) / rectH; i++) {\n    // 绘制纵轴刻度\n    ctx.moveTo(0, i * rectH);\n    ctx.lineTo(tickLength, i * rectH);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(i, -25, i * rectH);\n  }\n  for (let i = 1; i < scrollX / rectW; i++) {\n    // 绘制横轴刻度\n    ctx.moveTo(-i * rectW, 0);\n    ctx.lineTo(-i * rectW, tickLength);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(-i, -i * rectW - 10, -15);\n  }\n  for (let i = 1; i < (canvas.width - scrollX) / rectW; i++) {\n    // 绘制横轴刻度\n    ctx.moveTo(i * rectW, 0);\n    ctx.lineTo(i * rectW, tickLength);\n    ctx.font = \"20px Arial\";\n    ctx.fillText(i, i * rectW - 5, -15);\n  }\n  ctx.stroke();\n\n  ctx.restore();\n};\n\nexport const renderCanvas = (ctx, renderConfig) => {\n  const canvas = ctx.canvas;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  drawAxis(ctx, renderConfig);\n  drawSelection(ctx, renderConfig);\n};\n","import { randomId } from '../util'\nexport const newElement = ({\n  type,\n  x,\n  y,\n  strokeColor,\n  backgroundColor,\n  fillStyle,\n  strokeWidth,\n  strokeStyle,\n  roughness,\n  opacity,\n  width = 0,\n  height = 0,\n  angle = 0,\n  groupIds = [],\n  roundness = null,\n  boundElements = null,\n  link = null,\n  locked,\n  ...rest\n}) => {\n    return  {\n    id: randomId(),\n    type,\n    x,\n    y,\n    width,\n    height,\n    angle,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    strokeStyle,\n    roughness,\n    opacity,\n    groupIds,\n    roundness,\n    version: rest.version || 1,\n    versionNonce: rest.versionNonce ?? 0,\n    isDeleted: false,\n    boundElements,\n    updated: Date.now(),\n    link,\n    locked,\n  };\n};\n","import { mutateElement } from './mutateElement'\nexport const dragNewElement = (\n  draggingElement,\n  elementType,\n  originX,\n  originY,\n  x,\n  y,\n  width,\n  height,\n  shouldMaintainAspectRatio,\n  shouldResizeFromCenter,\n  widthAspectRatio\n) => {\n  let newX = x < originX ? originX - width : originX;\n  let newY = y < originY ? originY - height : originY;\n  if (width !== 0 && height !== 0) {\n    mutateElement(draggingElement, {\n      x: newX,\n      y: newY,\n      width,\n      height,\n    });\n  }\n};\n","export const mutateElement = (element, updates, informMutation = true) => {\n  for (const key in updates) {\n    const value = updates[key];\n    if (typeof value !== \"undefined\") {\n      element[key] = value;\n    }\n  }\n\n  return element;\n};\n"],"names":["viewportCoordsToSceneCoords","clientX","clientY","offsetLeft","offsetTop","x","scrollX","y","scrollY","distance","Math","abs","testIdBase","this","elements","nextElements","scene","Scene","appState","draggingElement","currentItemStrokeColor","currentItemBackgroundColor","currentItemFillStyle","currentItemStrokeWidth","currentItemStrokeStyle","currentItemRoughness","currentItemOpacity","Canvas","memo","canvasRef","useRef","canvasContainer","useEffect","canvas","current","ctx","getContext","offsetWidth","offsetHeight","width","window","devicePixelRatio","height","renderConfig","clearRect","save","rectH","rectW","translate","strokeStyle","fillStyle","beginPath","setLineDash","moveTo","lineTo","stroke","restore","lineWidth","textBaseline","i","font","fillText","drawAxis","context","fillRect","strokeRect","drawSelection","renderCanvas","wrap","handleWheel","e","preventDefault","addEventListener","passive","removeEventListener","createGenericElementOnPointerDown","elementType","pointerDownState","element","type","strokeColor","backgroundColor","strokeWidth","roughness","opacity","angle","groupIds","roundness","boundElements","link","locked","rest","id","version","versionNonce","isDeleted","updated","Date","now","newElement","origin","replaceAllElements","getElementsIncludingDeleted","onPointerUpFromCanvasPointerDownHandler","event","eventListeners","onMove","onUp","onPointerMoveFromCanvasPointerDownHandler","pointerCoords","lastCoords","maybeDragNewGenericElement","console","log","originX","originY","shouldMaintainAspectRatio","shouldResizeFromCenter","widthAspectRatio","updates","key","value","mutateElement","dragNewElement","initialPointerDownState","onKeyUp","onKeyDown","ref","onWheel","deltaX","deltaY","onPointerDown","onPointerMove","onPointerUp","className"],"sourceRoot":""}