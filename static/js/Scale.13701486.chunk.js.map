{"version":3,"file":"static/js/Scale.13701486.chunk.js","mappings":"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","sources":["pages/scale/renderScene.js","pages/scale/index.jsx","pages/scale/zoom.js"],"sourcesContent":["import { elements } from \"./index\";\nconst drawAxis = (ctx, { zoom, scrollX, scrollY }) => {\n  ctx.save();\n  const rectH = 100 * zoom.value; // 纵轴刻度间距\n  const rectW = 100 * zoom.value; // 横轴刻度间距\n  const tickLength = 8 * zoom.value; // 刻度线长度\n  const canvas = ctx.canvas;\n  const offsetX = scrollX * zoom.value;\n  const offsetY = scrollY * zoom.value;\n  ctx.translate(offsetX, offsetY);\n  ctx.strokeStyle = \"red\";\n  ctx.fillStyle = \"red\";\n  // 绘制横轴和纵轴\n  ctx.save();\n  ctx.beginPath();\n  ctx.setLineDash([10, 10]);\n  ctx.moveTo(0, -offsetY);\n  ctx.lineTo(0, canvas.height - offsetY);\n  ctx.moveTo(-offsetX, 0);\n  ctx.lineTo(canvas.width - offsetX, 0);\n  ctx.stroke();\n  ctx.restore();\n  // 绘制横轴和纵轴刻度\n  ctx.beginPath();\n  ctx.lineWidth = 2;\n  ctx.textBaseline = \"middle\";\n  for (let i = 0; i < offsetY / rectH; i++) {\n    // 绘制纵轴负数刻度\n    ctx.moveTo(0, -i * rectH);\n    ctx.lineTo(tickLength, -i * rectH);\n    ctx.font = `${20 * zoom.value}px Arial`;\n    ctx.fillText(-i, -25, -i * rectH);\n  }\n  for (let i = 0; i < (canvas.height - offsetY) / rectH; i++) {\n    // 绘制纵轴正数刻度\n    ctx.moveTo(0, i * rectH);\n    ctx.lineTo(tickLength, i * rectH);\n    ctx.font = `${20 * zoom.value}px Arial`;\n    ctx.fillText(i, -25, i * rectH);\n  }\n  for (let i = 1; i < offsetX / rectW; i++) {\n    // 绘制横轴负数刻度\n    ctx.moveTo(-i * rectW, 0);\n    ctx.lineTo(-i * rectW, tickLength);\n    ctx.font = `${20 * zoom.value}px Arial`;\n    ctx.fillText(-i, -i * rectW - 10, -15);\n  }\n  for (let i = 1; i < (canvas.width - offsetX) / rectW; i++) {\n    // 绘制横轴正数刻度\n    ctx.moveTo(i * rectW, 0);\n    ctx.lineTo(i * rectW, tickLength);\n    ctx.font = `${20 * zoom.value}px Arial`;\n    ctx.fillText(i, i * rectW - 5, -15);\n  }\n  ctx.stroke();\n\n  ctx.restore();\n};\nconst renderElements = (ctx, appState) => {\n  elements.forEach((ele) => {\n    ctx.save();\n    console.log('appStsate...', appState.scrollX)\n    ctx.translate(\n      (ele.x + appState.scrollX) * appState.zoom.value,\n      (ele.y + appState.scrollY) * appState.zoom.value\n    );\n    // ctx.translate(ele.x + appState.scrollX, ele.y + appState.scrollY);\n    ctx.scale(appState.zoom.value, appState.zoom.value);\n    ctx.strokeStyle = ele.strokeStyle;\n    ctx.strokeColor = ele.strokeColor;\n    ctx.strokeRect(0, 0, ele.width, ele.height);\n    ctx.restore();\n  });\n};\nconst renderScene = (canvas, appState) => {\n  const context = canvas.getContext(\"2d\");\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  drawAxis(context, appState);\n  renderElements(context, appState);\n};\n\nexport default renderScene;\n","import React, { memo, useRef, useEffect } from \"react\";\n// import MarkDown from \"@/components/markdown\";\n// import doc from \"../../../doc/canvas进阶/绘制矩形及无限画布.md\";\nimport renderScene from \"./renderScene\";\nimport { getNormalizedZoom, getStateForZoom } from \"./zoom\";\nimport \"./index.less\";\nconst appState = {\n  zoom: { value: 1 },\n  offsetLeft: 0,\n  offsetTop: 0,\n  scrollX: 0,\n  scrollY: 0,\n  draggingElement: null,\n};\nconst ZOOM_STEP = 0.1;\nexport const elements = [];\nconst viewportCoordsToSceneCoords = (\n  { clientX, clientY },\n  { zoom, offsetLeft, offsetTop, scrollX, scrollY }\n) => {\n  const x = (clientX - offsetLeft) / zoom.value - scrollX;\n  const y = (clientY - offsetTop) / zoom.value - scrollY;\n  return { x, y };\n};\nconst Canvas = memo(() => {\n  const canvasRef = useRef(null);\n  const canvasContainer = useRef(null);\n  const cursorPosition = useRef({});\n  const scaleRef = useRef();\n  useEffect(() => {\n    const render = () => {\n      const canvas = canvasRef.current;\n      const context = canvas.getContext(\"2d\");\n      const { offsetWidth, offsetHeight, offsetLeft, offsetTop } = canvas;\n      canvas.width = offsetWidth * window.devicePixelRatio;\n      canvas.height = offsetHeight * window.devicePixelRatio;\n      context.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n      appState.offsetLeft = offsetLeft;\n      appState.offsetTop = offsetTop;\n      renderScene(canvas, appState);\n    };\n    render();\n    const resize = () => {\n      render();\n    };\n    window.addEventListener(\"resize\", resize);\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n  useEffect(() => {\n    const wrap = canvasContainer.current;\n    const handleWheel = (e) => {\n      e.preventDefault();\n    };\n    // 防止双指滑动时切换页面\n    wrap.addEventListener(\"wheel\", handleWheel, {\n      passive: false,\n    });\n    const updateCurrentCursorPosition = (event) => {\n      cursorPosition.current = {\n        cursorX: event.clientX,\n        cursorY: event.clientY,\n      };\n    };\n    document.addEventListener(\"mousemove\", updateCurrentCursorPosition);\n    return () => {\n      wrap.removeEventListener(\"wheel\", handleWheel);\n      document.removeEventListener(\"mousemove\", updateCurrentCursorPosition);\n    };\n  }, []);\n  const handleCanvasPointerDown = (event) => {\n    const origin = viewportCoordsToSceneCoords(event, appState);\n    console.log(\"origin...\", appState, origin);\n    const pointerDownState = {\n      origin,\n      lastCoords: { ...origin },\n      eventListeners: {\n        onMove: null,\n        onUp: null,\n      },\n    };\n    const element = {\n      x: pointerDownState.origin.x,\n      y: pointerDownState.origin.y,\n      width: 0,\n      height: 0,\n      strokeColor: \"#000000\",\n      backgroundColor: \"transparent\",\n      fillStyle: \"hachure\",\n      strokeWidth: 1,\n      strokeStyle: \"solid\",\n    };\n    appState.draggingElement = element;\n    elements.push(element);\n    const onPointerMove =\n      onPointerMoveFromCanvasPointerDownHandler(pointerDownState);\n    const onPointerUp =\n      onPointerUpFromCanvasPointerDownHandler(pointerDownState);\n    window.addEventListener(\"pointermove\", onPointerMove);\n    window.addEventListener(\"pointerup\", onPointerUp);\n    pointerDownState.eventListeners.onMove = onPointerMove;\n    pointerDownState.eventListeners.onUp = onPointerUp;\n  };\n  const onPointerUpFromCanvasPointerDownHandler =\n    (pointerDownState) => (event) => {\n      window.removeEventListener(\n        \"pointermove\",\n        pointerDownState.eventListeners.onMove\n      );\n      window.removeEventListener(\n        \"pointerup\",\n        pointerDownState.eventListeners.onUp\n      );\n    };\n  const onPointerMoveFromCanvasPointerDownHandler =\n    (pointerDownState) => (event) => {\n      const pointerCoords = viewportCoordsToSceneCoords(event, appState);\n      pointerDownState.lastCoords.x = pointerCoords.x;\n      pointerDownState.lastCoords.y = pointerCoords.y;\n      // maybeDragNewGenericElement(pointerDownState, event);\n      appState.draggingElement.width =\n        pointerCoords.x - pointerDownState.origin.x;\n      appState.draggingElement.height =\n        pointerCoords.y - pointerDownState.origin.y;\n      renderScene(canvasRef.current, appState);\n    };\n  const handleCanvasWheel = (event) => {\n    const { deltaX, deltaY } = event;\n    // 关于缩放：双指放大时，deltaY是负数，缩小时，deltaY是正数\n    // 缩放，本质上就是对某个点的坐标进行变换\n    if (event.metaKey || event.ctrlKey) {\n      const sign = Math.sign(deltaY); // 只有两种情况，要么+1，要么-1\n      const MAX_STEP = ZOOM_STEP * 100; // 10\n      const absDelta = Math.abs(deltaY);\n      let delta = deltaY;\n      // delta最大为10\n      if (absDelta > MAX_STEP) {\n        delta = MAX_STEP * sign;\n      }\n      let newZoom = appState.zoom.value - delta / 100;\n      newZoom +=\n        Math.log10(Math.max(1, appState.zoom.value)) *\n        -sign *\n        Math.min(1, absDelta / 20);\n      const nextZoom = getNormalizedZoom(newZoom);\n      Object.assign(appState, {\n        ...getStateForZoom(\n          {\n            viewportX: cursorPosition.current.cursorX,\n            viewportY: cursorPosition.current.cursorY,\n            nextZoom: nextZoom,\n          },\n          appState\n        ),\n      });\n      scaleRef.current.innerText = `${(nextZoom * 100).toFixed(0)}%`;\n      renderScene(canvasRef.current, appState);\n\n      return;\n    }\n    //\n    appState.scrollX = appState.scrollX - deltaX / appState.zoom.value;\n    appState.scrollY = appState.scrollY - deltaY / appState.zoom.value;\n    renderScene(canvasRef.current, appState);\n  };\n  return (\n    <div className=\"infinite-canvas\">\n      <div ref={canvasContainer}>\n        <canvas\n          ref={canvasRef}\n          className=\"canvas\"\n          onPointerDown={handleCanvasPointerDown}\n          onWheel={handleCanvasWheel}\n        >\n          绘制canvas\n        </canvas>\n      </div>\n      <div>\n        <button\n          onClick={() => {\n            let minX = Infinity;\n            let maxX = -Infinity;\n            let minY = Infinity;\n            let maxY = -Infinity;\n\n            elements.forEach((element) => {\n              const [x1, y1, x2, y2] = [\n                element.x,\n                element.y,\n                element.x + element.width,\n                element.y + element.height,\n              ];\n              minX = Math.min(minX, x1);\n              minY = Math.min(minY, y1);\n              maxX = Math.max(maxX, x2);\n              maxY = Math.max(maxY, y2);\n            });\n\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = (maxX - minX + 20) * window.devicePixelRatio;\n            canvas.height = (maxY - minY + 20) * window.devicePixelRatio;\n            const context = canvas.getContext(\"2d\");\n            context.scale(window.devicePixelRatio, window.devicePixelRatio);\n            renderScene(canvas, {\n              ...appState,\n              scrollX: -minX + 10,\n              scrollY: -minY + 10,\n            });\n            console.log(\"导出\", elements);\n            var a = document.createElement(\"a\");\n            a.href = canvas.toDataURL();\n            a.download = \"canvas.png\";\n            a.click();\n          }}\n        >\n          导出PNG\n        </button>\n      </div>\n      <div ref={scaleRef}></div>\n      {/* <div className=\"tip\">温馨提示：可以在上面的画板中绘制矩形哦！！</div> */}\n      {/* <MarkDown src={doc} /> */}\n    </div>\n  );\n});\n\nexport default Canvas;\n","const MIN_ZOOM = 0.1;\n\nexport const getNormalizedZoom = (zoom) => {\n  return Math.max(MIN_ZOOM, Math.min(zoom, 30));\n};\n\n// export const getStateForZoom2 = (\n//   { viewportX, viewportY, nextZoom },\n//   appState\n// ) => {\n//   const appLayerX = viewportX - appState.offsetLeft;\n//   const appLayerY = viewportY - appState.offsetTop;\n\n//   const currentZoom = appState.zoom.value;\n\n//   const baseScrollX = appState.scrollX + (appLayerX - appLayerX / currentZoom);\n//   const baseScrollY = appState.scrollY + (appLayerY - appLayerY / currentZoom);\n\n//   const zoomOffsetScrollX = -(appLayerX - appLayerX / nextZoom);\n//   const zoomOffsetScrollY = -(appLayerY - appLayerY / nextZoom);\n\n//   return {\n//     scrollX: baseScrollX + zoomOffsetScrollX,\n//     scrollY: baseScrollY + zoomOffsetScrollY,\n//     zoom: {\n//       value: nextZoom,\n//     },\n//   };\n// };\n\n\nexport const getStateForZoom = (\n  { viewportX, viewportY, nextZoom },\n  appState\n) => {\n  const screenX = viewportX - appState.offsetLeft;\n  const screenY = viewportY - appState.offsetTop;\n  const currentZoom = appState.zoom.value;\n\n  return {\n    scrollX: appState.scrollX + screenX / nextZoom - screenX / currentZoom,\n    scrollY: appState.scrollY + screenY / nextZoom - screenY / currentZoom,\n    zoom: {\n      value: nextZoom,\n    }, \n  };\n};\n"],"names":["canvas","appState","context","getContext","clearRect","width","height","ctx","zoom","scrollX","scrollY","save","rectH","value","rectW","tickLength","offsetX","offsetY","translate","strokeStyle","fillStyle","beginPath","setLineDash","moveTo","lineTo","stroke","restore","lineWidth","textBaseline","i","font","fillText","drawAxis","elements","ele","console","log","x","y","scale","strokeColor","strokeRect","renderElements","offsetLeft","offsetTop","draggingElement","viewportCoordsToSceneCoords","clientX","clientY","memo","canvasRef","useRef","canvasContainer","cursorPosition","scaleRef","useEffect","render","current","offsetWidth","offsetHeight","window","devicePixelRatio","renderScene","resize","addEventListener","removeEventListener","wrap","handleWheel","e","preventDefault","passive","updateCurrentCursorPosition","event","cursorX","cursorY","document","onPointerUpFromCanvasPointerDownHandler","pointerDownState","eventListeners","onMove","onUp","onPointerMoveFromCanvasPointerDownHandler","pointerCoords","lastCoords","origin","className","ref","onPointerDown","element","backgroundColor","strokeWidth","push","onPointerMove","onPointerUp","onWheel","deltaX","deltaY","metaKey","ctrlKey","sign","Math","absDelta","abs","delta","ZOOM_STEP","newZoom","log10","max","min","nextZoom","Object","assign","viewportX","viewportY","screenX","screenY","currentZoom","getStateForZoom","innerText","toFixed","onClick","minX","Infinity","maxX","minY","maxY","forEach","x1","y1","x2","y2","createElement","a","href","toDataURL","download","click"],"sourceRoot":""}